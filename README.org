* organice - /'ɔ:gənaɪz/

*organice organizes Org files nicely!*

[[file:public/organice-small.png]]

Tests (CircleCI): [[https://circleci.com/gh/200ok-ch/organice][https://circleci.com/gh/200ok-ch/organice.svg?style=svg]]

Maintainability (Codeclimate): [[https://codeclimate.com/github/200ok-ch/organice/maintainability][https://api.codeclimate.com/v1/badges/41d614b1f85c8b261067/maintainability.png]]

Dependency management: [[https://greenkeeper.io/][file:https://badges.greenkeeper.io/200ok-ch/organice.svg]]

An implementation of Org mode without the dependency of Emacs - built
for mobile and desktop browsers.

organice lets you directly edit your org files online. It syncs with
Dropbox and Google Drive and is optimized for mobile use.

At 200ok, we run an instance of organice at https://organice.200ok.ch,
which is open for anyone to use! organice does not have a back-end
(it's just a front-end application, which uses either Dropbox or Google
Drive as back-end storage). Hence no data stored on our servers.

[[./images/screenshot--overview.png]]

** Usage
*** Current restrictions/expectations of organice

"Current" means we're working hard on removing the following
restrictions and expectations.

- organice understands only few in-buffer settings (=#+TODO:= and
  =#+TYP_TODO:=).
  - If you have other in-buffer settings and save the file with
    organice, they will be lost.
- After potential in-buffer settings, your Org file _has to_ begin
  with a headline.
  - Meaning that a file with just some text (which would otherwise be
    proper Org syntax) will not be parsed correctly.
  - After that first headline, organice is actually very robust in
    reading your Org file and _not_ breaking any of it. We've had
    users with 10k LOC Org files with all kinds of native Org features
    (of which organice only has partial understanding) and they just
    work fine!
- There is [[https://github.com/200ok-ch/organice/pull/2][a known parser bug]]: If you have a =*bold*= statement at
  the beginning of a line, it will be interpreted as a headline.

Generally, when working with distributed Org files, we're recommending
to put them under version control and to check for bugs and racing
conditions between clients.

Please [[https://github.com/200ok-ch/organice/issues/new][file an issue]] if you find additional restrictions, expectations
or bugs that you you wouldn’t have expected.

**** Background information

organice utilizes [[src/lib/parse_org.js][a custom parser]] for Org files. It works fine - if
you know about the kinks. Getting those out is not trivial, because
writing a parser in custom code is hard. "We're working hard" means
that we're in the process of implementing a proper BNF based parser
and a set of tests behind that. We're working on [[https://gitlab.200ok.ch/200ok/org-parser][org-parser]] which
strives to be that!

** Development

organice is built with React and Redux. It was bootstrapped with [[https://github.com/facebook/create-react-app][Create React App]].

To install the necessary packages, run:

#+BEGIN_SRC shell
yarn install
#+END_SRC

To test against your own Dropbox account, you'll need to
create a ~.env~ file by copying [[file:.env.sample][.env.sample]] to just ~.env~.

#+BEGIN_SRC shell
cp .env.sample .env
#+END_SRC

To run the app, run:

#+BEGIN_SRC shell
yarn start
#+END_SRC

*** Synchronization back-ends

Note that logging in to Dropbox will only work if you're running the
app on ~http://localhost:3000~, because all redirect URIs must be
specified ahead of time on the Dropbox developer console.

To configure your own application on Dropbox, please go [[https://www.dropbox.com/developers/apps/][here]] and then
configure this app key in the ~.env~ file. Make sure to add your own
URL as =Redirect URI=.

To configure your own application on Google Drive, please generate an
API key as described on [[https://developers.google.com/drive/api/v3/quickstart/js][this page]].


*** Contributions

To make contributions to this repository, please install [[https://prettier.io/][Prettier]] and
use it to format your code. This repository includes a
~.prettierrc.json~ with some configuration options that Prettier will
use automatically.

If you're using Emacs, you can autoformat your source files:
https://github.com/munen/emacs.d/#auto-formatting
** Deployment

Since organice is a front-end only application, it can easily be
deployed to any server capable of serving a static application.

Please note: If you want the hosted application to connect to Dropbox
or Google Drive, please read the section above on Synchronization back-ends.

*** FTP

First create the production build locally: =yarn run build=
Note: Creating a build will actually make your =REACT_APP_*= variables
from the =.env= file available under =process.env= even though it'll
be a front-end application.

And then upload to your web-server. Here's a script for your
convenience:

#+BEGIN_SRC shell
HOST='your_ftp_server_host'
USER='ftp_user'
PASSWD='ftp_password'

lftp $HOST <<END_SCRIPT
user $USER $PASSWD
mirror -R build/
quit
END_SCRIPT
exit 0
#+END_SRC

*** Heroku
Assuming, you have an account and have installed the [[https://devcenter.heroku.com/articles/heroku-cli][command line
tools]], deployment is as easy as:

#+BEGIN_SRC shell
heroku create
heroku config:set ON_HEROKU=1
git push heroku master
#+END_SRC

*** Routing

Whilst organice is a true SPA and therefore has no back-end
whatsoever, this does have an implication for deployment with regard
to routing. For routes like =example.com/foo= to work, we need a
little something extra. Within the context of a running SPA, =/foo=
would be matched by the React Router and the proper page would be
rendered by JavaScript. When initially requesting a route like that
from the web server itself, the SPA is not running yet and the web
server itself wouldn't find a file called =/foo=. It would return
a 404. The whole topic is explained in depth in this SO answer:
https://stackoverflow.com/a/36623117

For https://organice.200ok.ch we've opted to:

- Use the modern HTML5 history API with [[https://github.com/ReactTraining/react-router/blob/master/packages/react-router-dom/docs/api/BrowserRouter.md][BrowserRouter]]
- Not configure a back-end for isomorphic routing, because it would
  complicate application and deployment unnecessarily (SEO is a
  non-issue for organice)
- Use good old [[https://httpd.apache.org/][Apache Webserver]] for hosting the compiled static assets

Therefore configuring a catchall is as easy as setting up a
=.htaccess= file in the root of the organice folder containing:

#+BEGIN_EXAMPLE
RewriteEngine On
RewriteCond %{DOCUMENT_ROOT}%{REQUEST_URI} -f [OR]
RewriteCond %{DOCUMENT_ROOT}%{REQUEST_URI} -d
RewriteRule ^ - [L]

RewriteRule ^ /index.html [L]
#+END_EXAMPLE
** Capture templates

organice supports capture templates by implementing a flexible
mechanism using URL parameters. These three of the following
parameters are required and must be URL encoded:

- ~captureTemplateName~: the name of the capture template to use. This
  capture template must already exist in Settings > Capture templates.
- ~captureFile~: the =path= (for Dropbox) or =id= (for Google Drive)
  of the file in which to execute the capture template.
- ~captureContent~: the content you'd like to capture. This content
  will be placed at the cursor position if specified in the capture
  template (with ~%?~), or at the end of the template if its not
  specified.

You can also specify additional custom variables for use in your
templates. They should be in the format ~captureVariable_<your custom
variable>~, and should also be URL encoded. In your capture template
they'd show up as ~%<your custom variable>~.

*** Examples
**** Simple: Capture a string

Say, you want to capture thoughts/todos as they occur to you. You
might want to have a capture template to just get these things out of
your head.

This makes for a good "Inbox" capture template:

*Capture Template*

 #+BEGIN_SRC
* TODO %?
%U
#+END_SRC

*Example URL*

https://organice.200ok.ch?captureTemplateName=Inbox&captureContent=Read+up+on+capture+templates&captureFile=/org/things.org

*Result*

#+BEGIN_EXAMPLE
* TODO Read up on capture templates
[2019-09-08 Sun 20:54]
#+END_EXAMPLE

**** With custom variable
     <<media_capture>>

If you want to add web pages to a reading queue (with a title, a
capture date and a URL), this would be a good starting point:

*Capture Template*

#+BEGIN_EXAMPLE
* %?
%u

- URL: %mediaURL
#+END_EXAMPLE

*Example URL*

https://organice.200ok.ch?captureTemplateName=Media&captureContent=Play+Emacs+like+an+instrument&captureFile=/org/media.org&captureVariable_mediaURL=https://200ok.ch/posts/2018-04-27_Play_Emacs_like_an_Instrument.html

*Result*

#+BEGIN_EXAMPLE
* Play Emacs like an instrument
[2019-09-08 Sun]

- URL: https://200ok.ch/posts/2018-04-27_Play_Emacs_like_an_Instrument.html
#+END_EXAMPLE

*** Bookmarklets

Since organice is a web application, you can use the capture templates
feature to create bookmarklets, of course! For example, if you want a
bookmarklet to add the current page (title, capture date and URL) to
your reading queue using [[media_capture][this capture template]], all you need is a
little bit of JavaScript:

#+BEGIN_SRC javascript
  javascript:(function() {
    const {title} = document;
    const url = `https://organice.200ok.ch?captureTemplateName=Media&captureContent=${title}&captureFile=/org/media.org&captureVariable_mediaURL=${
    window.location.href
  }`;
    window.open(url, "_blank");
  })()
#+END_SRC

*** Siri integration

The organice capture mechanism integrates very nicely with the [[https://support.apple.com/guide/shortcuts/welcome/ios][Siri
Shortcuts]] feature in iOS, allowing you to use Siri to execute capture
templates.

You can use [[https://www.icloud.com/shortcuts/14f91f8cf8f547a183a0734396240984][this sample Shortcut]] to get started with this right away
in iOS 12 or newer. Open the link on your iOS device and click "Get
Shortcut". Then open up the Shortcuts app and edit the template by
following the directions in the comments. Then [[https://support.apple.com/en-us/HT209055][record a Siri trigger]]
and you're good to go!

** Comparison

*** Beorg

Before starting work on organice, I did use Beorg and donated to it
multiple times, because I was very happy to have a good option to
access Org files on my phone with it.

The important differences to me are:

- organice is FOSS which is very much in the spirit of Org whilst Beorg
  is proprietary
- organice is web based, so there is no lock-in to a specific device or
  OS
- Beorg currently has better offline support


*** org-web
organice has a shared history with [[https://github.com/DanielDe/org-web][org-web]]. In fact, it is a friendly
fork.

organice differs from org-web in that:

- It's a community driven project. See our
  - [[file:CODE_OF_CONDUCT.org][Code of conduct]]
  - [[file:CONTRIBUTING.org][Contributing guidelines]]

- It has the commitment of a Swiss company behind it to continually
  work on it.
  - This company is 200ok llc: https://200ok.ch/

- It has many bug fixes (for example on parsing and exporting org
  files) compared to its ancestry.
- It continues to evolve independently with it's own feature set.
- It is a project with equal focus on mobile as desktop browsers.
- org-web tracks users with Google Analytics. organice [[https://github.com/200ok-ch/organice/issues/41][doesn't]].

**** What's new?

To see how organice differs from org-web, please consult the [[file:changelog.org][changelog]]
which contains all changes since forking.

**** Acknowledgment

We are extraordinarily grateful to DanielDe the original creator!
\_/\\_

We forked the project, because we have different visions on how to go
forward. He envisions a mobile only solution, we think it's great to
have organice be available to any browser to enable anyone on the go
or any non-Emacs user easy access to Org files. Also, DanielDe thinks
of org-web as [[https://github.com/200ok-ch/organice/issues/72][his pet project]] whereas organice has the full power of
[[https://200ok.ch][200ok llc]] behind it whilst building a strong self-sufficient community
around it.

Thank you for all, DanielDe!

** Attributions

*** Logo

Illustration credit: [[https://www.vecteezy.com/][Vecteezy.com]]
