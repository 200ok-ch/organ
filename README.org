* organ

[[./images/organ.png]]

An implementation of Org mode without the dependency of Emacs - built
for mobile and desktop browsers.

organ lets you directly edit your org files online. It syncs with
Dropbox and Google Drive and is optimized for mobile use.

[[./images/overview.png]]

** Why =organ=?

- You can play an organ like an instrument (because it is)
- An organ has many buttons and functionality and sounds awesome (just
  like Emacs)
- Org is as vital to the functioning of me as an organ(;

** Capture params and Siri support

organ supports a flexible mechanism for capturing using URL
parameters. This mechanism integrates very nicely with the new [[https://support.apple.com/guide/shortcuts/welcome/ios][Siri
Shortcuts]] feature in iOS 12, allowing you to use Siri to execute
capture templates.

You can use [[https://www.icloud.com/shortcuts/4e51e8b748d14a50aa70ac6fb963f775][this sample Shortcut]] to get started with this right away
in iOS 12. Open the link on your iOS device and click "Get Shortcut".
Then open up the Shortcuts app and edit the template by following the
directions in the comments. Then record a Siri trigger and you're good
to go!

Alternatively, you can take advantage of the URL parameters yourself
to build your own custom capture mechanism. All three of the following
parameters are required and must be URL encoded:

- ~captureTemplateName~: the name of the capture template to use. This
  capture template must already exist in Settings > Capture templates.
- ~captureFile~: the path (for Dropbox) or id (for Google Drive) of
  the file in which to execute the capture template.
- ~captureContent~: the content you'd like to capture. This content
  will be placed at the cursor position if specified in the capture
  template (with ~%?~), or at the end of the template if its not
  specified.

You can also specify additional custom variables for use in your
templates. They should be in the format ~captureVariable_<your custom
variable>~, and should also be URL encoded. In your capture template
they'd show up as ~%<your custom variable>~.

Here's an example URL:

[[https://org.200ok.ch?captureTemplateName=Grocery%2520item&captureContent=Lemon&captureFile=/org/todo.org&captureVariable_location=Home]]
** Development
organ is built with React and Redux. It was bootstrapped with [[https://github.com/facebook/create-react-app][Create
React App]].

To install the necessary packages, run:

#+BEGIN_SRC
yarn install
#+END_SRC

To run the app, run:

#+BEGIN_SRC
yarn start
#+END_SRC

*** Synchronization back-ends

To test against your actual Dropbox, you'll need to create a ~.env~
file by copying ~.env.sample~ to just ~.env~. To test against your
Google Drive you'll need to generate an API key as described on [[https://developers.google.com/drive/api/v3/quickstart/js][this
page]].

Note that this will only work if you're running the app on
~http://localhost:3000~ because all redirect URIs must be specified
ahead of time on the Dropbox and Google developer consoles.

Alternatively, you can create your own 'application' on Dropbox [[https://www.dropbox.com/developers/apps/][here]]
and then use this app key. Make sure to add your own URL as =Redirect
URI=.

*** Contributions

To make contributions to this repository, please install [[https://prettier.io/][Prettier]] and
use it to format your code. This repository includes a
~.prettierrc.json~ with some configuration options that Prettier will
use automatically.

If you're using Emacs, you can autoformat your source files: https://github.com/munen/emacs.d/#auto-formatting

** Deployment

Since organ is a front-end only application, it can easily be
deployed to any server capable of serving a static application.

Please note: If you want the hosted application to connect to Dropbox
or Google Drive, please read the section above on Synchronization back-ends.

*** FTP

First create the production build locally: =yarn run build=
Note: Creating a build will actually make your =REACT_APP_*= variables
from the =.env= file available under =process.env= even though it'll
be a front-end application.

And then upload to your web-server. Here's a script for your
convenience:

#+BEGIN_SRC shell
HOST='your_ftp_server_host'
USER='ftp_user'
PASSWD='ftp_password'

lftp $HOST <<END_SCRIPT
user $USER $PASSWD
mirror -R build/
quit
END_SCRIPT
exit 0
#+END_SRC

*** Heroku
Assuming, you have an account and have installed the [[https://devcenter.heroku.com/articles/heroku-cli][command line
tools]], deployment is as easy as:

#+BEGIN_SRC shell
heroku create
git push heroku master
#+END_SRC

** Comparison

*** Beorg

Before starting work on organ, I did use Beorg and donated to it
multiple times, because I was very happy to have a good option to
access Org files on my phone with it.

The important differences to me are:

- organ is FOSS which is very much in the spirit of Org whilst Beorg
  is proprietary
- organ is web based, so there is no lock-in to a specific device or
  OS
- Beorg currently has better offline support

** History

organ is a fork from [[https://github.com/DanielDe/org-web][org-web]]. We are extraordinarily grateful to
DanielDe the original creator! \_/\\_

We forked the project, because we have different visions on how to go
forward. He envisions a mobile only solution, we think it's great to
have organ be available to any browser to enable anyone on the go or
any non-Emacs user easy access to Org files. Also, DanielDe thinks of
org-web as [[https://github.com/DanielDe/org-web/issues/72][his pet project]] whereas organ has the full power of 200ok
llc behind it whilst building a strong self-sufficient community
around it.

Thank you for all, DanielDe!

To see how organ differs from org-web, please consult the [[file:changelog.org][changelog]]
which contains all changes since forking.
