// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<OrgFile /> renders an org file 1`] = `undefined`;

exports[`Can advance todo state for selected header in an org file 1`] = `
<MemoryRouter
  keyLength={0}
>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <Provider
      store={
        Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(observable): [Function],
        }
      }
    >
      <Connect(OrgFile)
        path="/some/test/file"
      >
        <OrgFile
          base={
            Object {
              "hideLoadingMessage": [Function],
              "loadStaticFile": [Function],
              "restoreBaseSettings": [Function],
              "setActiveModalPage": [Function],
              "setBulletStyle": [Function],
              "setCustomKeybinding": [Function],
              "setFontSize": [Function],
              "setHasUnseenWhatsNew": [Function],
              "setLastSeenWhatsNewHeader": [Function],
              "setLastViewedFile": [Function],
              "setLoadingMessage": [Function],
              "setShouldStoreSettingsInDropbox": [Function],
              "setShouldTapTodoToAdvance": [Function],
              "unloadStaticFile": [Function],
            }
          }
          customKeybindings={
            Immutable.Map {
            }
          }
          dropbox={
            Object {
              "authenticate": [Function],
              "downloadFile": [Function],
              "getDirectoryListing": [Function],
              "pushBackup": [Function],
              "pushCurrentFile": [Function],
              "redownloadCurrentFile": [Function],
              "setCurrentFileBrowserDirectoryListing": [Function],
              "signOut": [Function],
            }
          }
          headers={
            Immutable.List [
              Immutable.Map {
                titleLine: Immutable.Map {
                  title: Immutable.List [
                    Immutable.Map {
                      type: "text",
                      contents: "Top level header",
                    },
                  ],
                  rawTitle: "Top level header",
                  todoKeyword: "TODO",
                  tags: Immutable.List [
                  ],
                },
                rawDescription: "",
                description: Immutable.List [
                ],
                opened: true,
                id: 16,
                nestingLevel: 1,
              },
              Immutable.Map {
                titleLine: Immutable.Map {
                  title: Immutable.List [
                    Immutable.Map {
                      type: "text",
                      contents: "A nested header",
                    },
                  ],
                  rawTitle: "A nested header",
                  todoKeyword: undefined,
                  tags: Immutable.List [
                  ],
                },
                rawDescription: "",
                description: Immutable.List [
                ],
                opened: false,
                id: 17,
                nestingLevel: 2,
              },
              Immutable.Map {
                titleLine: Immutable.Map {
                  title: Immutable.List [
                    Immutable.Map {
                      type: "text",
                      contents: "A todo item",
                    },
                  ],
                  rawTitle: "A todo item",
                  todoKeyword: "TODO",
                  tags: Immutable.List [
                  ],
                },
                rawDescription: "",
                description: Immutable.List [
                ],
                opened: false,
                id: 18,
                nestingLevel: 2,
              },
              Immutable.Map {
                titleLine: Immutable.Map {
                  title: Immutable.List [
                    Immutable.Map {
                      type: "text",
                      contents: "A finished todo item",
                    },
                  ],
                  rawTitle: "A finished todo item",
                  todoKeyword: "DONE",
                  tags: Immutable.List [
                  ],
                },
                rawDescription: "",
                description: Immutable.List [
                ],
                opened: false,
                id: 19,
                nestingLevel: 2,
              },
              Immutable.Map {
                titleLine: Immutable.Map {
                  title: Immutable.List [
                    Immutable.Map {
                      type: "text",
                      contents: "Another top level header",
                    },
                  ],
                  rawTitle: "Another top level header",
                  todoKeyword: undefined,
                  tags: Immutable.List [
                  ],
                },
                rawDescription: "Some description content",
                description: Immutable.List [
                  Immutable.Map {
                    type: "text",
                    contents: "Some description content",
                  },
                ],
                opened: false,
                id: 20,
                nestingLevel: 1,
              },
              Immutable.Map {
                titleLine: Immutable.Map {
                  title: Immutable.List [
                    Immutable.Map {
                      type: "text",
                      contents: "A header with tags                                              ",
                    },
                  ],
                  rawTitle: "A header with tags                                              ",
                  todoKeyword: undefined,
                  tags: Immutable.List [
                    "tag1",
                    "tag2",
                  ],
                },
                rawDescription: "",
                description: Immutable.List [
                ],
                opened: false,
                id: 21,
                nestingLevel: 1,
              },
              Immutable.Map {
                titleLine: Immutable.Map {
                  title: Immutable.List [
                    Immutable.Map {
                      type: "text",
                      contents: "A header with ",
                    },
                    Immutable.Map {
                      type: "link",
                      contents: Immutable.Map {
                        uri: "https://google.com",
                        title: "a link",
                      },
                    },
                  ],
                  rawTitle: "A header with [[https://google.com][a link]]",
                  todoKeyword: undefined,
                  tags: Immutable.List [
                  ],
                },
                rawDescription: "",
                description: Immutable.List [
                ],
                opened: false,
                id: 22,
                nestingLevel: 1,
              },
            ]
          }
          isDirty={true}
          loadedPath="/some/test/file"
          org={
            Object {
              "addHeader": [Function],
              "addHeaderAndEdit": [Function],
              "addNewTableColumn": [Function],
              "addNewTableRow": [Function],
              "advanceTodoState": [Function],
              "applyOpennessState": [Function],
              "displayFile": [Function],
              "enterDescriptionEditMode": [Function],
              "enterTableEditMode": [Function],
              "enterTitleEditMode": [Function],
              "exitDescriptionEditMode": [Function],
              "exitTableEditMode": [Function],
              "exitTitleEditMode": [Function],
              "focusHeader": [Function],
              "moveHeaderDown": [Function],
              "moveHeaderLeft": [Function],
              "moveHeaderRight": [Function],
              "moveHeaderUp": [Function],
              "moveSubtreeLeft": [Function],
              "moveSubtreeRight": [Function],
              "moveTableColumnLeft": [Function],
              "moveTableColumnRight": [Function],
              "moveTableRowDown": [Function],
              "moveTableRowUp": [Function],
              "noOp": [Function],
              "openHeader": [Function],
              "removeHeader": [Function],
              "removeTableColumn": [Function],
              "removeTableRow": [Function],
              "selectHeader": [Function],
              "selectNextSiblingHeader": [Function],
              "selectNextVisibleHeader": [Function],
              "selectPreviousVisibleHeader": [Function],
              "setDirty": [Function],
              "setSelectedTableCellId": [Function],
              "stopDisplayingFile": [Function],
              "toggleHeaderOpened": [Function],
              "unfocusHeader": [Function],
              "updateHeaderDescription": [Function],
              "updateHeaderTitle": [Function],
              "updateTableCellValue": [Function],
            }
          }
          path="/some/test/file"
          selectedHeaderId={16}
          undo={
            Object {
              "clearHistory": [Function],
              "jump": [Function],
              "jumpToFuture": [Function],
              "jumpToPast": [Function],
              "redo": [Function],
              "undo": [Function],
            }
          }
        >
          <HotKeys
            handlers={
              Object {
                "addHeader": [Function],
                "advanceTodo": [Function],
                "editDescription": [Function],
                "editTitle": [Function],
                "exitEditMode": [Function],
                "moveHeaderDown": [Function],
                "moveHeaderLeft": [Function],
                "moveHeaderRight": [Function],
                "moveHeaderUp": [Function],
                "removeHeader": [Function],
                "selectNextVisibleHeader": [Function],
                "selectPreviousVisibleHeader": [Function],
                "toggleHeaderOpened": [Function],
                "undo": [Function],
              }
            }
            keyMap={
              Object {
                "addHeader": "ctrl+enter",
                "advanceTodo": "ctrl+t",
                "editDescription": "ctrl+d",
                "editTitle": "ctrl+h",
                "exitEditMode": "command+enter",
                "moveHeaderDown": "ctrl+command+n",
                "moveHeaderLeft": "ctrl+command+b",
                "moveHeaderRight": "ctrl+command+f",
                "moveHeaderUp": "ctrl+command+p",
                "removeHeader": "backspace",
                "selectNextVisibleHeader": "ctrl+n",
                "selectPreviousVisibleHeader": "ctrl+p",
                "toggleHeaderOpened": "tab",
                "undo": "ctrl+shift+-",
              }
            }
          >
            <div
              className="org-file-container"
              tabIndex="-1"
            >
              <Connect(HeaderList)>
                <HeaderList
                  headers={
                    Immutable.List [
                      Immutable.Map {
                        titleLine: Immutable.Map {
                          title: Immutable.List [
                            Immutable.Map {
                              type: "text",
                              contents: "Top level header",
                            },
                          ],
                          rawTitle: "Top level header",
                          todoKeyword: "TODO",
                          tags: Immutable.List [
                          ],
                        },
                        rawDescription: "",
                        description: Immutable.List [
                        ],
                        opened: true,
                        id: 16,
                        nestingLevel: 1,
                      },
                      Immutable.Map {
                        titleLine: Immutable.Map {
                          title: Immutable.List [
                            Immutable.Map {
                              type: "text",
                              contents: "A nested header",
                            },
                          ],
                          rawTitle: "A nested header",
                          todoKeyword: undefined,
                          tags: Immutable.List [
                          ],
                        },
                        rawDescription: "",
                        description: Immutable.List [
                        ],
                        opened: false,
                        id: 17,
                        nestingLevel: 2,
                      },
                      Immutable.Map {
                        titleLine: Immutable.Map {
                          title: Immutable.List [
                            Immutable.Map {
                              type: "text",
                              contents: "A todo item",
                            },
                          ],
                          rawTitle: "A todo item",
                          todoKeyword: "TODO",
                          tags: Immutable.List [
                          ],
                        },
                        rawDescription: "",
                        description: Immutable.List [
                        ],
                        opened: false,
                        id: 18,
                        nestingLevel: 2,
                      },
                      Immutable.Map {
                        titleLine: Immutable.Map {
                          title: Immutable.List [
                            Immutable.Map {
                              type: "text",
                              contents: "A finished todo item",
                            },
                          ],
                          rawTitle: "A finished todo item",
                          todoKeyword: "DONE",
                          tags: Immutable.List [
                          ],
                        },
                        rawDescription: "",
                        description: Immutable.List [
                        ],
                        opened: false,
                        id: 19,
                        nestingLevel: 2,
                      },
                      Immutable.Map {
                        titleLine: Immutable.Map {
                          title: Immutable.List [
                            Immutable.Map {
                              type: "text",
                              contents: "Another top level header",
                            },
                          ],
                          rawTitle: "Another top level header",
                          todoKeyword: undefined,
                          tags: Immutable.List [
                          ],
                        },
                        rawDescription: "Some description content",
                        description: Immutable.List [
                          Immutable.Map {
                            type: "text",
                            contents: "Some description content",
                          },
                        ],
                        opened: false,
                        id: 20,
                        nestingLevel: 1,
                      },
                      Immutable.Map {
                        titleLine: Immutable.Map {
                          title: Immutable.List [
                            Immutable.Map {
                              type: "text",
                              contents: "A header with tags                                              ",
                            },
                          ],
                          rawTitle: "A header with tags                                              ",
                          todoKeyword: undefined,
                          tags: Immutable.List [
                            "tag1",
                            "tag2",
                          ],
                        },
                        rawDescription: "",
                        description: Immutable.List [
                        ],
                        opened: false,
                        id: 21,
                        nestingLevel: 1,
                      },
                      Immutable.Map {
                        titleLine: Immutable.Map {
                          title: Immutable.List [
                            Immutable.Map {
                              type: "text",
                              contents: "A header with ",
                            },
                            Immutable.Map {
                              type: "link",
                              contents: Immutable.Map {
                                uri: "https://google.com",
                                title: "a link",
                              },
                            },
                          ],
                          rawTitle: "A header with [[https://google.com][a link]]",
                          todoKeyword: undefined,
                          tags: Immutable.List [
                          ],
                        },
                        rawDescription: "",
                        description: Immutable.List [
                        ],
                        opened: false,
                        id: 22,
                        nestingLevel: 1,
                      },
                    ]
                  }
                  selectedHeaderId={16}
                >
                  <div
                    className="header-list-container"
                  >
                    <Connect(Header)
                      color="rgba(38, 143, 214, 1)"
                      hasContent={true}
                      header={
                        Immutable.Map {
                          titleLine: Immutable.Map {
                            title: Immutable.List [
                              Immutable.Map {
                                type: "text",
                                contents: "Top level header",
                              },
                            ],
                            rawTitle: "Top level header",
                            todoKeyword: "TODO",
                            tags: Immutable.List [
                            ],
                          },
                          rawDescription: "",
                          description: Immutable.List [
                          ],
                          opened: true,
                          id: 16,
                          nestingLevel: 1,
                        }
                      }
                      isSelected={true}
                      key="16"
                      onRef={[Function]}
                    >
                      <Header
                        color="rgba(38, 143, 214, 1)"
                        focusedHeader={null}
                        hasContent={true}
                        header={
                          Immutable.Map {
                            titleLine: Immutable.Map {
                              title: Immutable.List [
                                Immutable.Map {
                                  type: "text",
                                  contents: "Top level header",
                                },
                              ],
                              rawTitle: "Top level header",
                              todoKeyword: "TODO",
                              tags: Immutable.List [
                              ],
                            },
                            rawDescription: "",
                            description: Immutable.List [
                            ],
                            opened: true,
                            id: 16,
                            nestingLevel: 1,
                          }
                        }
                        isSelected={true}
                        onRef={[Function]}
                      >
                        <div
                          className="header header--selected"
                          style={
                            Object {
                              "paddingLeft": 20,
                            }
                          }
                        >
                          <div
                            style={
                              Object {
                                "color": "rgba(38, 143, 214, 1)",
                                "marginLeft": -16,
                              }
                            }
                          >
                            *
                          </div>
                          <Connect(TitleLine)
                            color="rgba(38, 143, 214, 1)"
                            hasContent={true}
                            header={
                              Immutable.Map {
                                titleLine: Immutable.Map {
                                  title: Immutable.List [
                                    Immutable.Map {
                                      type: "text",
                                      contents: "Top level header",
                                    },
                                  ],
                                  rawTitle: "Top level header",
                                  todoKeyword: "TODO",
                                  tags: Immutable.List [
                                  ],
                                },
                                rawDescription: "",
                                description: Immutable.List [
                                ],
                                opened: true,
                                id: 16,
                                nestingLevel: 1,
                              }
                            }
                            isSelected={true}
                          >
                            <TitleLine
                              color="rgba(38, 143, 214, 1)"
                              hasContent={true}
                              header={
                                Immutable.Map {
                                  titleLine: Immutable.Map {
                                    title: Immutable.List [
                                      Immutable.Map {
                                        type: "text",
                                        contents: "Top level header",
                                      },
                                    ],
                                    rawTitle: "Top level header",
                                    todoKeyword: "TODO",
                                    tags: Immutable.List [
                                    ],
                                  },
                                  rawDescription: "",
                                  description: Immutable.List [
                                  ],
                                  opened: true,
                                  id: 16,
                                  nestingLevel: 1,
                                }
                              }
                              isSelected={true}
                              org={
                                Object {
                                  "addHeader": [Function],
                                  "addHeaderAndEdit": [Function],
                                  "addNewTableColumn": [Function],
                                  "addNewTableRow": [Function],
                                  "advanceTodoState": [Function],
                                  "applyOpennessState": [Function],
                                  "displayFile": [Function],
                                  "enterDescriptionEditMode": [Function],
                                  "enterTableEditMode": [Function],
                                  "enterTitleEditMode": [Function],
                                  "exitDescriptionEditMode": [Function],
                                  "exitTableEditMode": [Function],
                                  "exitTitleEditMode": [Function],
                                  "focusHeader": [Function],
                                  "moveHeaderDown": [Function],
                                  "moveHeaderLeft": [Function],
                                  "moveHeaderRight": [Function],
                                  "moveHeaderUp": [Function],
                                  "moveSubtreeLeft": [Function],
                                  "moveSubtreeRight": [Function],
                                  "moveTableColumnLeft": [Function],
                                  "moveTableColumnRight": [Function],
                                  "moveTableRowDown": [Function],
                                  "moveTableRowUp": [Function],
                                  "noOp": [Function],
                                  "openHeader": [Function],
                                  "removeHeader": [Function],
                                  "removeTableColumn": [Function],
                                  "removeTableRow": [Function],
                                  "selectHeader": [Function],
                                  "selectNextSiblingHeader": [Function],
                                  "selectNextVisibleHeader": [Function],
                                  "selectPreviousVisibleHeader": [Function],
                                  "setDirty": [Function],
                                  "setSelectedTableCellId": [Function],
                                  "stopDisplayingFile": [Function],
                                  "toggleHeaderOpened": [Function],
                                  "unfocusHeader": [Function],
                                  "updateHeaderDescription": [Function],
                                  "updateHeaderTitle": [Function],
                                  "updateTableCellValue": [Function],
                                }
                              }
                            >
                              <div
                                className="title-line nice-scroll"
                                onClick={[Function]}
                              >
                                <span
                                  className="todo-keyword todo-keyword--todo"
                                  onClick={[Function]}
                                >
                                  TODO
                                </span>
                                <div>
                                  <span
                                    style={
                                      Object {
                                        "color": "rgba(38, 143, 214, 1)",
                                        "fontWeight": "bold",
                                      }
                                    }
                                  >
                                    <AttributedString
                                      parts={
                                        Immutable.List [
                                          Immutable.Map {
                                            type: "text",
                                            contents: "Top level header",
                                          },
                                        ]
                                      }
                                    >
                                      <span>
                                        Top level header
                                      </span>
                                    </AttributedString>
                                  </span>
                                </div>
                              </div>
                            </TitleLine>
                          </Connect(TitleLine)>
                          <Connect(HeaderContent)
                            header={
                              Immutable.Map {
                                titleLine: Immutable.Map {
                                  title: Immutable.List [
                                    Immutable.Map {
                                      type: "text",
                                      contents: "Top level header",
                                    },
                                  ],
                                  rawTitle: "Top level header",
                                  todoKeyword: "TODO",
                                  tags: Immutable.List [
                                  ],
                                },
                                rawDescription: "",
                                description: Immutable.List [
                                ],
                                opened: true,
                                id: 16,
                                nestingLevel: 1,
                              }
                            }
                          >
                            <HeaderContent
                              header={
                                Immutable.Map {
                                  titleLine: Immutable.Map {
                                    title: Immutable.List [
                                      Immutable.Map {
                                        type: "text",
                                        contents: "Top level header",
                                      },
                                    ],
                                    rawTitle: "Top level header",
                                    todoKeyword: "TODO",
                                    tags: Immutable.List [
                                    ],
                                  },
                                  rawDescription: "",
                                  description: Immutable.List [
                                  ],
                                  opened: true,
                                  id: 16,
                                  nestingLevel: 1,
                                }
                              }
                              org={
                                Object {
                                  "addHeader": [Function],
                                  "addHeaderAndEdit": [Function],
                                  "addNewTableColumn": [Function],
                                  "addNewTableRow": [Function],
                                  "advanceTodoState": [Function],
                                  "applyOpennessState": [Function],
                                  "displayFile": [Function],
                                  "enterDescriptionEditMode": [Function],
                                  "enterTableEditMode": [Function],
                                  "enterTitleEditMode": [Function],
                                  "exitDescriptionEditMode": [Function],
                                  "exitTableEditMode": [Function],
                                  "exitTitleEditMode": [Function],
                                  "focusHeader": [Function],
                                  "moveHeaderDown": [Function],
                                  "moveHeaderLeft": [Function],
                                  "moveHeaderRight": [Function],
                                  "moveHeaderUp": [Function],
                                  "moveSubtreeLeft": [Function],
                                  "moveSubtreeRight": [Function],
                                  "moveTableColumnLeft": [Function],
                                  "moveTableColumnRight": [Function],
                                  "moveTableRowDown": [Function],
                                  "moveTableRowUp": [Function],
                                  "noOp": [Function],
                                  "openHeader": [Function],
                                  "removeHeader": [Function],
                                  "removeTableColumn": [Function],
                                  "removeTableRow": [Function],
                                  "selectHeader": [Function],
                                  "selectNextSiblingHeader": [Function],
                                  "selectNextVisibleHeader": [Function],
                                  "selectPreviousVisibleHeader": [Function],
                                  "setDirty": [Function],
                                  "setSelectedTableCellId": [Function],
                                  "stopDisplayingFile": [Function],
                                  "toggleHeaderOpened": [Function],
                                  "unfocusHeader": [Function],
                                  "updateHeaderDescription": [Function],
                                  "updateHeaderTitle": [Function],
                                  "updateTableCellValue": [Function],
                                }
                              }
                              selectedTableCellId={null}
                            >
                              <div
                                className="header-content-container nice-scroll"
                              >
                                <AttributedString
                                  onExitTableEditMode={[Function]}
                                  onTableCellSelect={[Function]}
                                  onTableCellValueUpdate={[Function]}
                                  parts={
                                    Immutable.List [
                                    ]
                                  }
                                  selectedTableCellId={null}
                                >
                                  <span>
                                    <undefined />
                                  </span>
                                </AttributedString>
                              </div>
                            </HeaderContent>
                          </Connect(HeaderContent)>
                        </div>
                      </Header>
                    </Connect(Header)>
                    <Connect(Header)
                      color="rgba(42, 164, 168, 1)"
                      hasContent={false}
                      header={
                        Immutable.Map {
                          titleLine: Immutable.Map {
                            title: Immutable.List [
                              Immutable.Map {
                                type: "text",
                                contents: "A nested header",
                              },
                            ],
                            rawTitle: "A nested header",
                            todoKeyword: undefined,
                            tags: Immutable.List [
                            ],
                          },
                          rawDescription: "",
                          description: Immutable.List [
                          ],
                          opened: false,
                          id: 17,
                          nestingLevel: 2,
                        }
                      }
                      isSelected={false}
                      key="17"
                      onRef={[Function]}
                    >
                      <Header
                        color="rgba(42, 164, 168, 1)"
                        focusedHeader={null}
                        hasContent={false}
                        header={
                          Immutable.Map {
                            titleLine: Immutable.Map {
                              title: Immutable.List [
                                Immutable.Map {
                                  type: "text",
                                  contents: "A nested header",
                                },
                              ],
                              rawTitle: "A nested header",
                              todoKeyword: undefined,
                              tags: Immutable.List [
                              ],
                            },
                            rawDescription: "",
                            description: Immutable.List [
                            ],
                            opened: false,
                            id: 17,
                            nestingLevel: 2,
                          }
                        }
                        isSelected={false}
                        onRef={[Function]}
                      >
                        <div
                          className="header"
                          style={
                            Object {
                              "paddingLeft": 40,
                            }
                          }
                        >
                          <div
                            style={
                              Object {
                                "color": "rgba(42, 164, 168, 1)",
                                "marginLeft": -16,
                              }
                            }
                          >
                            *
                          </div>
                          <Connect(TitleLine)
                            color="rgba(42, 164, 168, 1)"
                            hasContent={false}
                            header={
                              Immutable.Map {
                                titleLine: Immutable.Map {
                                  title: Immutable.List [
                                    Immutable.Map {
                                      type: "text",
                                      contents: "A nested header",
                                    },
                                  ],
                                  rawTitle: "A nested header",
                                  todoKeyword: undefined,
                                  tags: Immutable.List [
                                  ],
                                },
                                rawDescription: "",
                                description: Immutable.List [
                                ],
                                opened: false,
                                id: 17,
                                nestingLevel: 2,
                              }
                            }
                            isSelected={false}
                          >
                            <TitleLine
                              color="rgba(42, 164, 168, 1)"
                              hasContent={false}
                              header={
                                Immutable.Map {
                                  titleLine: Immutable.Map {
                                    title: Immutable.List [
                                      Immutable.Map {
                                        type: "text",
                                        contents: "A nested header",
                                      },
                                    ],
                                    rawTitle: "A nested header",
                                    todoKeyword: undefined,
                                    tags: Immutable.List [
                                    ],
                                  },
                                  rawDescription: "",
                                  description: Immutable.List [
                                  ],
                                  opened: false,
                                  id: 17,
                                  nestingLevel: 2,
                                }
                              }
                              isSelected={false}
                              org={
                                Object {
                                  "addHeader": [Function],
                                  "addHeaderAndEdit": [Function],
                                  "addNewTableColumn": [Function],
                                  "addNewTableRow": [Function],
                                  "advanceTodoState": [Function],
                                  "applyOpennessState": [Function],
                                  "displayFile": [Function],
                                  "enterDescriptionEditMode": [Function],
                                  "enterTableEditMode": [Function],
                                  "enterTitleEditMode": [Function],
                                  "exitDescriptionEditMode": [Function],
                                  "exitTableEditMode": [Function],
                                  "exitTitleEditMode": [Function],
                                  "focusHeader": [Function],
                                  "moveHeaderDown": [Function],
                                  "moveHeaderLeft": [Function],
                                  "moveHeaderRight": [Function],
                                  "moveHeaderUp": [Function],
                                  "moveSubtreeLeft": [Function],
                                  "moveSubtreeRight": [Function],
                                  "moveTableColumnLeft": [Function],
                                  "moveTableColumnRight": [Function],
                                  "moveTableRowDown": [Function],
                                  "moveTableRowUp": [Function],
                                  "noOp": [Function],
                                  "openHeader": [Function],
                                  "removeHeader": [Function],
                                  "removeTableColumn": [Function],
                                  "removeTableRow": [Function],
                                  "selectHeader": [Function],
                                  "selectNextSiblingHeader": [Function],
                                  "selectNextVisibleHeader": [Function],
                                  "selectPreviousVisibleHeader": [Function],
                                  "setDirty": [Function],
                                  "setSelectedTableCellId": [Function],
                                  "stopDisplayingFile": [Function],
                                  "toggleHeaderOpened": [Function],
                                  "unfocusHeader": [Function],
                                  "updateHeaderDescription": [Function],
                                  "updateHeaderTitle": [Function],
                                  "updateTableCellValue": [Function],
                                }
                              }
                            >
                              <div
                                className="title-line nice-scroll"
                                onClick={[Function]}
                              >
                                <div>
                                  <span
                                    style={
                                      Object {
                                        "color": "rgba(42, 164, 168, 1)",
                                        "fontWeight": "bold",
                                      }
                                    }
                                  >
                                    <AttributedString
                                      parts={
                                        Immutable.List [
                                          Immutable.Map {
                                            type: "text",
                                            contents: "A nested header",
                                          },
                                        ]
                                      }
                                    >
                                      <span>
                                        A nested header
                                      </span>
                                    </AttributedString>
                                  </span>
                                </div>
                              </div>
                            </TitleLine>
                          </Connect(TitleLine)>
                          <Connect(HeaderContent)
                            header={
                              Immutable.Map {
                                titleLine: Immutable.Map {
                                  title: Immutable.List [
                                    Immutable.Map {
                                      type: "text",
                                      contents: "A nested header",
                                    },
                                  ],
                                  rawTitle: "A nested header",
                                  todoKeyword: undefined,
                                  tags: Immutable.List [
                                  ],
                                },
                                rawDescription: "",
                                description: Immutable.List [
                                ],
                                opened: false,
                                id: 17,
                                nestingLevel: 2,
                              }
                            }
                          >
                            <HeaderContent
                              header={
                                Immutable.Map {
                                  titleLine: Immutable.Map {
                                    title: Immutable.List [
                                      Immutable.Map {
                                        type: "text",
                                        contents: "A nested header",
                                      },
                                    ],
                                    rawTitle: "A nested header",
                                    todoKeyword: undefined,
                                    tags: Immutable.List [
                                    ],
                                  },
                                  rawDescription: "",
                                  description: Immutable.List [
                                  ],
                                  opened: false,
                                  id: 17,
                                  nestingLevel: 2,
                                }
                              }
                              org={
                                Object {
                                  "addHeader": [Function],
                                  "addHeaderAndEdit": [Function],
                                  "addNewTableColumn": [Function],
                                  "addNewTableRow": [Function],
                                  "advanceTodoState": [Function],
                                  "applyOpennessState": [Function],
                                  "displayFile": [Function],
                                  "enterDescriptionEditMode": [Function],
                                  "enterTableEditMode": [Function],
                                  "enterTitleEditMode": [Function],
                                  "exitDescriptionEditMode": [Function],
                                  "exitTableEditMode": [Function],
                                  "exitTitleEditMode": [Function],
                                  "focusHeader": [Function],
                                  "moveHeaderDown": [Function],
                                  "moveHeaderLeft": [Function],
                                  "moveHeaderRight": [Function],
                                  "moveHeaderUp": [Function],
                                  "moveSubtreeLeft": [Function],
                                  "moveSubtreeRight": [Function],
                                  "moveTableColumnLeft": [Function],
                                  "moveTableColumnRight": [Function],
                                  "moveTableRowDown": [Function],
                                  "moveTableRowUp": [Function],
                                  "noOp": [Function],
                                  "openHeader": [Function],
                                  "removeHeader": [Function],
                                  "removeTableColumn": [Function],
                                  "removeTableRow": [Function],
                                  "selectHeader": [Function],
                                  "selectNextSiblingHeader": [Function],
                                  "selectNextVisibleHeader": [Function],
                                  "selectPreviousVisibleHeader": [Function],
                                  "setDirty": [Function],
                                  "setSelectedTableCellId": [Function],
                                  "stopDisplayingFile": [Function],
                                  "toggleHeaderOpened": [Function],
                                  "unfocusHeader": [Function],
                                  "updateHeaderDescription": [Function],
                                  "updateHeaderTitle": [Function],
                                  "updateTableCellValue": [Function],
                                }
                              }
                              selectedTableCellId={null}
                            >
                              <div />
                            </HeaderContent>
                          </Connect(HeaderContent)>
                        </div>
                      </Header>
                    </Connect(Header)>
                    <Connect(Header)
                      color="rgba(42, 164, 168, 1)"
                      hasContent={false}
                      header={
                        Immutable.Map {
                          titleLine: Immutable.Map {
                            title: Immutable.List [
                              Immutable.Map {
                                type: "text",
                                contents: "A todo item",
                              },
                            ],
                            rawTitle: "A todo item",
                            todoKeyword: "TODO",
                            tags: Immutable.List [
                            ],
                          },
                          rawDescription: "",
                          description: Immutable.List [
                          ],
                          opened: false,
                          id: 18,
                          nestingLevel: 2,
                        }
                      }
                      isSelected={false}
                      key="18"
                      onRef={[Function]}
                    >
                      <Header
                        color="rgba(42, 164, 168, 1)"
                        focusedHeader={null}
                        hasContent={false}
                        header={
                          Immutable.Map {
                            titleLine: Immutable.Map {
                              title: Immutable.List [
                                Immutable.Map {
                                  type: "text",
                                  contents: "A todo item",
                                },
                              ],
                              rawTitle: "A todo item",
                              todoKeyword: "TODO",
                              tags: Immutable.List [
                              ],
                            },
                            rawDescription: "",
                            description: Immutable.List [
                            ],
                            opened: false,
                            id: 18,
                            nestingLevel: 2,
                          }
                        }
                        isSelected={false}
                        onRef={[Function]}
                      >
                        <div
                          className="header"
                          style={
                            Object {
                              "paddingLeft": 40,
                            }
                          }
                        >
                          <div
                            style={
                              Object {
                                "color": "rgba(42, 164, 168, 1)",
                                "marginLeft": -16,
                              }
                            }
                          >
                            *
                          </div>
                          <Connect(TitleLine)
                            color="rgba(42, 164, 168, 1)"
                            hasContent={false}
                            header={
                              Immutable.Map {
                                titleLine: Immutable.Map {
                                  title: Immutable.List [
                                    Immutable.Map {
                                      type: "text",
                                      contents: "A todo item",
                                    },
                                  ],
                                  rawTitle: "A todo item",
                                  todoKeyword: "TODO",
                                  tags: Immutable.List [
                                  ],
                                },
                                rawDescription: "",
                                description: Immutable.List [
                                ],
                                opened: false,
                                id: 18,
                                nestingLevel: 2,
                              }
                            }
                            isSelected={false}
                          >
                            <TitleLine
                              color="rgba(42, 164, 168, 1)"
                              hasContent={false}
                              header={
                                Immutable.Map {
                                  titleLine: Immutable.Map {
                                    title: Immutable.List [
                                      Immutable.Map {
                                        type: "text",
                                        contents: "A todo item",
                                      },
                                    ],
                                    rawTitle: "A todo item",
                                    todoKeyword: "TODO",
                                    tags: Immutable.List [
                                    ],
                                  },
                                  rawDescription: "",
                                  description: Immutable.List [
                                  ],
                                  opened: false,
                                  id: 18,
                                  nestingLevel: 2,
                                }
                              }
                              isSelected={false}
                              org={
                                Object {
                                  "addHeader": [Function],
                                  "addHeaderAndEdit": [Function],
                                  "addNewTableColumn": [Function],
                                  "addNewTableRow": [Function],
                                  "advanceTodoState": [Function],
                                  "applyOpennessState": [Function],
                                  "displayFile": [Function],
                                  "enterDescriptionEditMode": [Function],
                                  "enterTableEditMode": [Function],
                                  "enterTitleEditMode": [Function],
                                  "exitDescriptionEditMode": [Function],
                                  "exitTableEditMode": [Function],
                                  "exitTitleEditMode": [Function],
                                  "focusHeader": [Function],
                                  "moveHeaderDown": [Function],
                                  "moveHeaderLeft": [Function],
                                  "moveHeaderRight": [Function],
                                  "moveHeaderUp": [Function],
                                  "moveSubtreeLeft": [Function],
                                  "moveSubtreeRight": [Function],
                                  "moveTableColumnLeft": [Function],
                                  "moveTableColumnRight": [Function],
                                  "moveTableRowDown": [Function],
                                  "moveTableRowUp": [Function],
                                  "noOp": [Function],
                                  "openHeader": [Function],
                                  "removeHeader": [Function],
                                  "removeTableColumn": [Function],
                                  "removeTableRow": [Function],
                                  "selectHeader": [Function],
                                  "selectNextSiblingHeader": [Function],
                                  "selectNextVisibleHeader": [Function],
                                  "selectPreviousVisibleHeader": [Function],
                                  "setDirty": [Function],
                                  "setSelectedTableCellId": [Function],
                                  "stopDisplayingFile": [Function],
                                  "toggleHeaderOpened": [Function],
                                  "unfocusHeader": [Function],
                                  "updateHeaderDescription": [Function],
                                  "updateHeaderTitle": [Function],
                                  "updateTableCellValue": [Function],
                                }
                              }
                            >
                              <div
                                className="title-line nice-scroll"
                                onClick={[Function]}
                              >
                                <span
                                  className="todo-keyword todo-keyword--todo"
                                  onClick={[Function]}
                                >
                                  TODO
                                </span>
                                <div>
                                  <span
                                    style={
                                      Object {
                                        "color": "rgba(42, 164, 168, 1)",
                                        "fontWeight": "bold",
                                      }
                                    }
                                  >
                                    <AttributedString
                                      parts={
                                        Immutable.List [
                                          Immutable.Map {
                                            type: "text",
                                            contents: "A todo item",
                                          },
                                        ]
                                      }
                                    >
                                      <span>
                                        A todo item
                                      </span>
                                    </AttributedString>
                                  </span>
                                </div>
                              </div>
                            </TitleLine>
                          </Connect(TitleLine)>
                          <Connect(HeaderContent)
                            header={
                              Immutable.Map {
                                titleLine: Immutable.Map {
                                  title: Immutable.List [
                                    Immutable.Map {
                                      type: "text",
                                      contents: "A todo item",
                                    },
                                  ],
                                  rawTitle: "A todo item",
                                  todoKeyword: "TODO",
                                  tags: Immutable.List [
                                  ],
                                },
                                rawDescription: "",
                                description: Immutable.List [
                                ],
                                opened: false,
                                id: 18,
                                nestingLevel: 2,
                              }
                            }
                          >
                            <HeaderContent
                              header={
                                Immutable.Map {
                                  titleLine: Immutable.Map {
                                    title: Immutable.List [
                                      Immutable.Map {
                                        type: "text",
                                        contents: "A todo item",
                                      },
                                    ],
                                    rawTitle: "A todo item",
                                    todoKeyword: "TODO",
                                    tags: Immutable.List [
                                    ],
                                  },
                                  rawDescription: "",
                                  description: Immutable.List [
                                  ],
                                  opened: false,
                                  id: 18,
                                  nestingLevel: 2,
                                }
                              }
                              org={
                                Object {
                                  "addHeader": [Function],
                                  "addHeaderAndEdit": [Function],
                                  "addNewTableColumn": [Function],
                                  "addNewTableRow": [Function],
                                  "advanceTodoState": [Function],
                                  "applyOpennessState": [Function],
                                  "displayFile": [Function],
                                  "enterDescriptionEditMode": [Function],
                                  "enterTableEditMode": [Function],
                                  "enterTitleEditMode": [Function],
                                  "exitDescriptionEditMode": [Function],
                                  "exitTableEditMode": [Function],
                                  "exitTitleEditMode": [Function],
                                  "focusHeader": [Function],
                                  "moveHeaderDown": [Function],
                                  "moveHeaderLeft": [Function],
                                  "moveHeaderRight": [Function],
                                  "moveHeaderUp": [Function],
                                  "moveSubtreeLeft": [Function],
                                  "moveSubtreeRight": [Function],
                                  "moveTableColumnLeft": [Function],
                                  "moveTableColumnRight": [Function],
                                  "moveTableRowDown": [Function],
                                  "moveTableRowUp": [Function],
                                  "noOp": [Function],
                                  "openHeader": [Function],
                                  "removeHeader": [Function],
                                  "removeTableColumn": [Function],
                                  "removeTableRow": [Function],
                                  "selectHeader": [Function],
                                  "selectNextSiblingHeader": [Function],
                                  "selectNextVisibleHeader": [Function],
                                  "selectPreviousVisibleHeader": [Function],
                                  "setDirty": [Function],
                                  "setSelectedTableCellId": [Function],
                                  "stopDisplayingFile": [Function],
                                  "toggleHeaderOpened": [Function],
                                  "unfocusHeader": [Function],
                                  "updateHeaderDescription": [Function],
                                  "updateHeaderTitle": [Function],
                                  "updateTableCellValue": [Function],
                                }
                              }
                              selectedTableCellId={null}
                            >
                              <div />
                            </HeaderContent>
                          </Connect(HeaderContent)>
                        </div>
                      </Header>
                    </Connect(Header)>
                    <Connect(Header)
                      color="rgba(42, 164, 168, 1)"
                      hasContent={false}
                      header={
                        Immutable.Map {
                          titleLine: Immutable.Map {
                            title: Immutable.List [
                              Immutable.Map {
                                type: "text",
                                contents: "A finished todo item",
                              },
                            ],
                            rawTitle: "A finished todo item",
                            todoKeyword: "DONE",
                            tags: Immutable.List [
                            ],
                          },
                          rawDescription: "",
                          description: Immutable.List [
                          ],
                          opened: false,
                          id: 19,
                          nestingLevel: 2,
                        }
                      }
                      isSelected={false}
                      key="19"
                      onRef={[Function]}
                    >
                      <Header
                        color="rgba(42, 164, 168, 1)"
                        focusedHeader={null}
                        hasContent={false}
                        header={
                          Immutable.Map {
                            titleLine: Immutable.Map {
                              title: Immutable.List [
                                Immutable.Map {
                                  type: "text",
                                  contents: "A finished todo item",
                                },
                              ],
                              rawTitle: "A finished todo item",
                              todoKeyword: "DONE",
                              tags: Immutable.List [
                              ],
                            },
                            rawDescription: "",
                            description: Immutable.List [
                            ],
                            opened: false,
                            id: 19,
                            nestingLevel: 2,
                          }
                        }
                        isSelected={false}
                        onRef={[Function]}
                      >
                        <div
                          className="header"
                          style={
                            Object {
                              "paddingLeft": 40,
                            }
                          }
                        >
                          <div
                            style={
                              Object {
                                "color": "rgba(42, 164, 168, 1)",
                                "marginLeft": -16,
                              }
                            }
                          >
                            *
                          </div>
                          <Connect(TitleLine)
                            color="rgba(42, 164, 168, 1)"
                            hasContent={false}
                            header={
                              Immutable.Map {
                                titleLine: Immutable.Map {
                                  title: Immutable.List [
                                    Immutable.Map {
                                      type: "text",
                                      contents: "A finished todo item",
                                    },
                                  ],
                                  rawTitle: "A finished todo item",
                                  todoKeyword: "DONE",
                                  tags: Immutable.List [
                                  ],
                                },
                                rawDescription: "",
                                description: Immutable.List [
                                ],
                                opened: false,
                                id: 19,
                                nestingLevel: 2,
                              }
                            }
                            isSelected={false}
                          >
                            <TitleLine
                              color="rgba(42, 164, 168, 1)"
                              hasContent={false}
                              header={
                                Immutable.Map {
                                  titleLine: Immutable.Map {
                                    title: Immutable.List [
                                      Immutable.Map {
                                        type: "text",
                                        contents: "A finished todo item",
                                      },
                                    ],
                                    rawTitle: "A finished todo item",
                                    todoKeyword: "DONE",
                                    tags: Immutable.List [
                                    ],
                                  },
                                  rawDescription: "",
                                  description: Immutable.List [
                                  ],
                                  opened: false,
                                  id: 19,
                                  nestingLevel: 2,
                                }
                              }
                              isSelected={false}
                              org={
                                Object {
                                  "addHeader": [Function],
                                  "addHeaderAndEdit": [Function],
                                  "addNewTableColumn": [Function],
                                  "addNewTableRow": [Function],
                                  "advanceTodoState": [Function],
                                  "applyOpennessState": [Function],
                                  "displayFile": [Function],
                                  "enterDescriptionEditMode": [Function],
                                  "enterTableEditMode": [Function],
                                  "enterTitleEditMode": [Function],
                                  "exitDescriptionEditMode": [Function],
                                  "exitTableEditMode": [Function],
                                  "exitTitleEditMode": [Function],
                                  "focusHeader": [Function],
                                  "moveHeaderDown": [Function],
                                  "moveHeaderLeft": [Function],
                                  "moveHeaderRight": [Function],
                                  "moveHeaderUp": [Function],
                                  "moveSubtreeLeft": [Function],
                                  "moveSubtreeRight": [Function],
                                  "moveTableColumnLeft": [Function],
                                  "moveTableColumnRight": [Function],
                                  "moveTableRowDown": [Function],
                                  "moveTableRowUp": [Function],
                                  "noOp": [Function],
                                  "openHeader": [Function],
                                  "removeHeader": [Function],
                                  "removeTableColumn": [Function],
                                  "removeTableRow": [Function],
                                  "selectHeader": [Function],
                                  "selectNextSiblingHeader": [Function],
                                  "selectNextVisibleHeader": [Function],
                                  "selectPreviousVisibleHeader": [Function],
                                  "setDirty": [Function],
                                  "setSelectedTableCellId": [Function],
                                  "stopDisplayingFile": [Function],
                                  "toggleHeaderOpened": [Function],
                                  "unfocusHeader": [Function],
                                  "updateHeaderDescription": [Function],
                                  "updateHeaderTitle": [Function],
                                  "updateTableCellValue": [Function],
                                }
                              }
                            >
                              <div
                                className="title-line nice-scroll"
                                onClick={[Function]}
                              >
                                <span
                                  className="todo-keyword todo-keyword--done"
                                  onClick={[Function]}
                                >
                                  DONE
                                </span>
                                <div>
                                  <span
                                    style={
                                      Object {
                                        "color": "rgba(42, 164, 168, 1)",
                                        "fontWeight": "bold",
                                      }
                                    }
                                  >
                                    <AttributedString
                                      parts={
                                        Immutable.List [
                                          Immutable.Map {
                                            type: "text",
                                            contents: "A finished todo item",
                                          },
                                        ]
                                      }
                                    >
                                      <span>
                                        A finished todo item
                                      </span>
                                    </AttributedString>
                                  </span>
                                </div>
                              </div>
                            </TitleLine>
                          </Connect(TitleLine)>
                          <Connect(HeaderContent)
                            header={
                              Immutable.Map {
                                titleLine: Immutable.Map {
                                  title: Immutable.List [
                                    Immutable.Map {
                                      type: "text",
                                      contents: "A finished todo item",
                                    },
                                  ],
                                  rawTitle: "A finished todo item",
                                  todoKeyword: "DONE",
                                  tags: Immutable.List [
                                  ],
                                },
                                rawDescription: "",
                                description: Immutable.List [
                                ],
                                opened: false,
                                id: 19,
                                nestingLevel: 2,
                              }
                            }
                          >
                            <HeaderContent
                              header={
                                Immutable.Map {
                                  titleLine: Immutable.Map {
                                    title: Immutable.List [
                                      Immutable.Map {
                                        type: "text",
                                        contents: "A finished todo item",
                                      },
                                    ],
                                    rawTitle: "A finished todo item",
                                    todoKeyword: "DONE",
                                    tags: Immutable.List [
                                    ],
                                  },
                                  rawDescription: "",
                                  description: Immutable.List [
                                  ],
                                  opened: false,
                                  id: 19,
                                  nestingLevel: 2,
                                }
                              }
                              org={
                                Object {
                                  "addHeader": [Function],
                                  "addHeaderAndEdit": [Function],
                                  "addNewTableColumn": [Function],
                                  "addNewTableRow": [Function],
                                  "advanceTodoState": [Function],
                                  "applyOpennessState": [Function],
                                  "displayFile": [Function],
                                  "enterDescriptionEditMode": [Function],
                                  "enterTableEditMode": [Function],
                                  "enterTitleEditMode": [Function],
                                  "exitDescriptionEditMode": [Function],
                                  "exitTableEditMode": [Function],
                                  "exitTitleEditMode": [Function],
                                  "focusHeader": [Function],
                                  "moveHeaderDown": [Function],
                                  "moveHeaderLeft": [Function],
                                  "moveHeaderRight": [Function],
                                  "moveHeaderUp": [Function],
                                  "moveSubtreeLeft": [Function],
                                  "moveSubtreeRight": [Function],
                                  "moveTableColumnLeft": [Function],
                                  "moveTableColumnRight": [Function],
                                  "moveTableRowDown": [Function],
                                  "moveTableRowUp": [Function],
                                  "noOp": [Function],
                                  "openHeader": [Function],
                                  "removeHeader": [Function],
                                  "removeTableColumn": [Function],
                                  "removeTableRow": [Function],
                                  "selectHeader": [Function],
                                  "selectNextSiblingHeader": [Function],
                                  "selectNextVisibleHeader": [Function],
                                  "selectPreviousVisibleHeader": [Function],
                                  "setDirty": [Function],
                                  "setSelectedTableCellId": [Function],
                                  "stopDisplayingFile": [Function],
                                  "toggleHeaderOpened": [Function],
                                  "unfocusHeader": [Function],
                                  "updateHeaderDescription": [Function],
                                  "updateHeaderTitle": [Function],
                                  "updateTableCellValue": [Function],
                                }
                              }
                              selectedTableCellId={null}
                            >
                              <div />
                            </HeaderContent>
                          </Connect(HeaderContent)>
                        </div>
                      </Header>
                    </Connect(Header)>
                    <Connect(Header)
                      color="rgba(38, 143, 214, 1)"
                      hasContent={true}
                      header={
                        Immutable.Map {
                          titleLine: Immutable.Map {
                            title: Immutable.List [
                              Immutable.Map {
                                type: "text",
                                contents: "Another top level header",
                              },
                            ],
                            rawTitle: "Another top level header",
                            todoKeyword: undefined,
                            tags: Immutable.List [
                            ],
                          },
                          rawDescription: "Some description content",
                          description: Immutable.List [
                            Immutable.Map {
                              type: "text",
                              contents: "Some description content",
                            },
                          ],
                          opened: false,
                          id: 20,
                          nestingLevel: 1,
                        }
                      }
                      isSelected={false}
                      key="20"
                      onRef={[Function]}
                    >
                      <Header
                        color="rgba(38, 143, 214, 1)"
                        focusedHeader={null}
                        hasContent={true}
                        header={
                          Immutable.Map {
                            titleLine: Immutable.Map {
                              title: Immutable.List [
                                Immutable.Map {
                                  type: "text",
                                  contents: "Another top level header",
                                },
                              ],
                              rawTitle: "Another top level header",
                              todoKeyword: undefined,
                              tags: Immutable.List [
                              ],
                            },
                            rawDescription: "Some description content",
                            description: Immutable.List [
                              Immutable.Map {
                                type: "text",
                                contents: "Some description content",
                              },
                            ],
                            opened: false,
                            id: 20,
                            nestingLevel: 1,
                          }
                        }
                        isSelected={false}
                        onRef={[Function]}
                      >
                        <div
                          className="header"
                          style={
                            Object {
                              "paddingLeft": 20,
                            }
                          }
                        >
                          <div
                            style={
                              Object {
                                "color": "rgba(38, 143, 214, 1)",
                                "marginLeft": -16,
                              }
                            }
                          >
                            *
                          </div>
                          <Connect(TitleLine)
                            color="rgba(38, 143, 214, 1)"
                            hasContent={true}
                            header={
                              Immutable.Map {
                                titleLine: Immutable.Map {
                                  title: Immutable.List [
                                    Immutable.Map {
                                      type: "text",
                                      contents: "Another top level header",
                                    },
                                  ],
                                  rawTitle: "Another top level header",
                                  todoKeyword: undefined,
                                  tags: Immutable.List [
                                  ],
                                },
                                rawDescription: "Some description content",
                                description: Immutable.List [
                                  Immutable.Map {
                                    type: "text",
                                    contents: "Some description content",
                                  },
                                ],
                                opened: false,
                                id: 20,
                                nestingLevel: 1,
                              }
                            }
                            isSelected={false}
                          >
                            <TitleLine
                              color="rgba(38, 143, 214, 1)"
                              hasContent={true}
                              header={
                                Immutable.Map {
                                  titleLine: Immutable.Map {
                                    title: Immutable.List [
                                      Immutable.Map {
                                        type: "text",
                                        contents: "Another top level header",
                                      },
                                    ],
                                    rawTitle: "Another top level header",
                                    todoKeyword: undefined,
                                    tags: Immutable.List [
                                    ],
                                  },
                                  rawDescription: "Some description content",
                                  description: Immutable.List [
                                    Immutable.Map {
                                      type: "text",
                                      contents: "Some description content",
                                    },
                                  ],
                                  opened: false,
                                  id: 20,
                                  nestingLevel: 1,
                                }
                              }
                              isSelected={false}
                              org={
                                Object {
                                  "addHeader": [Function],
                                  "addHeaderAndEdit": [Function],
                                  "addNewTableColumn": [Function],
                                  "addNewTableRow": [Function],
                                  "advanceTodoState": [Function],
                                  "applyOpennessState": [Function],
                                  "displayFile": [Function],
                                  "enterDescriptionEditMode": [Function],
                                  "enterTableEditMode": [Function],
                                  "enterTitleEditMode": [Function],
                                  "exitDescriptionEditMode": [Function],
                                  "exitTableEditMode": [Function],
                                  "exitTitleEditMode": [Function],
                                  "focusHeader": [Function],
                                  "moveHeaderDown": [Function],
                                  "moveHeaderLeft": [Function],
                                  "moveHeaderRight": [Function],
                                  "moveHeaderUp": [Function],
                                  "moveSubtreeLeft": [Function],
                                  "moveSubtreeRight": [Function],
                                  "moveTableColumnLeft": [Function],
                                  "moveTableColumnRight": [Function],
                                  "moveTableRowDown": [Function],
                                  "moveTableRowUp": [Function],
                                  "noOp": [Function],
                                  "openHeader": [Function],
                                  "removeHeader": [Function],
                                  "removeTableColumn": [Function],
                                  "removeTableRow": [Function],
                                  "selectHeader": [Function],
                                  "selectNextSiblingHeader": [Function],
                                  "selectNextVisibleHeader": [Function],
                                  "selectPreviousVisibleHeader": [Function],
                                  "setDirty": [Function],
                                  "setSelectedTableCellId": [Function],
                                  "stopDisplayingFile": [Function],
                                  "toggleHeaderOpened": [Function],
                                  "unfocusHeader": [Function],
                                  "updateHeaderDescription": [Function],
                                  "updateHeaderTitle": [Function],
                                  "updateTableCellValue": [Function],
                                }
                              }
                            >
                              <div
                                className="title-line nice-scroll"
                                onClick={[Function]}
                              >
                                <div>
                                  <span
                                    style={
                                      Object {
                                        "color": "rgba(38, 143, 214, 1)",
                                        "fontWeight": "bold",
                                      }
                                    }
                                  >
                                    <AttributedString
                                      parts={
                                        Immutable.List [
                                          Immutable.Map {
                                            type: "text",
                                            contents: "Another top level header",
                                          },
                                        ]
                                      }
                                    >
                                      <span>
                                        Another top level header
                                      </span>
                                    </AttributedString>
                                    ...
                                  </span>
                                </div>
                              </div>
                            </TitleLine>
                          </Connect(TitleLine)>
                          <Connect(HeaderContent)
                            header={
                              Immutable.Map {
                                titleLine: Immutable.Map {
                                  title: Immutable.List [
                                    Immutable.Map {
                                      type: "text",
                                      contents: "Another top level header",
                                    },
                                  ],
                                  rawTitle: "Another top level header",
                                  todoKeyword: undefined,
                                  tags: Immutable.List [
                                  ],
                                },
                                rawDescription: "Some description content",
                                description: Immutable.List [
                                  Immutable.Map {
                                    type: "text",
                                    contents: "Some description content",
                                  },
                                ],
                                opened: false,
                                id: 20,
                                nestingLevel: 1,
                              }
                            }
                          >
                            <HeaderContent
                              header={
                                Immutable.Map {
                                  titleLine: Immutable.Map {
                                    title: Immutable.List [
                                      Immutable.Map {
                                        type: "text",
                                        contents: "Another top level header",
                                      },
                                    ],
                                    rawTitle: "Another top level header",
                                    todoKeyword: undefined,
                                    tags: Immutable.List [
                                    ],
                                  },
                                  rawDescription: "Some description content",
                                  description: Immutable.List [
                                    Immutable.Map {
                                      type: "text",
                                      contents: "Some description content",
                                    },
                                  ],
                                  opened: false,
                                  id: 20,
                                  nestingLevel: 1,
                                }
                              }
                              org={
                                Object {
                                  "addHeader": [Function],
                                  "addHeaderAndEdit": [Function],
                                  "addNewTableColumn": [Function],
                                  "addNewTableRow": [Function],
                                  "advanceTodoState": [Function],
                                  "applyOpennessState": [Function],
                                  "displayFile": [Function],
                                  "enterDescriptionEditMode": [Function],
                                  "enterTableEditMode": [Function],
                                  "enterTitleEditMode": [Function],
                                  "exitDescriptionEditMode": [Function],
                                  "exitTableEditMode": [Function],
                                  "exitTitleEditMode": [Function],
                                  "focusHeader": [Function],
                                  "moveHeaderDown": [Function],
                                  "moveHeaderLeft": [Function],
                                  "moveHeaderRight": [Function],
                                  "moveHeaderUp": [Function],
                                  "moveSubtreeLeft": [Function],
                                  "moveSubtreeRight": [Function],
                                  "moveTableColumnLeft": [Function],
                                  "moveTableColumnRight": [Function],
                                  "moveTableRowDown": [Function],
                                  "moveTableRowUp": [Function],
                                  "noOp": [Function],
                                  "openHeader": [Function],
                                  "removeHeader": [Function],
                                  "removeTableColumn": [Function],
                                  "removeTableRow": [Function],
                                  "selectHeader": [Function],
                                  "selectNextSiblingHeader": [Function],
                                  "selectNextVisibleHeader": [Function],
                                  "selectPreviousVisibleHeader": [Function],
                                  "setDirty": [Function],
                                  "setSelectedTableCellId": [Function],
                                  "stopDisplayingFile": [Function],
                                  "toggleHeaderOpened": [Function],
                                  "unfocusHeader": [Function],
                                  "updateHeaderDescription": [Function],
                                  "updateHeaderTitle": [Function],
                                  "updateTableCellValue": [Function],
                                }
                              }
                              selectedTableCellId={null}
                            >
                              <div />
                            </HeaderContent>
                          </Connect(HeaderContent)>
                        </div>
                      </Header>
                    </Connect(Header)>
                    <Connect(Header)
                      color="rgba(38, 143, 214, 1)"
                      hasContent={false}
                      header={
                        Immutable.Map {
                          titleLine: Immutable.Map {
                            title: Immutable.List [
                              Immutable.Map {
                                type: "text",
                                contents: "A header with tags                                              ",
                              },
                            ],
                            rawTitle: "A header with tags                                              ",
                            todoKeyword: undefined,
                            tags: Immutable.List [
                              "tag1",
                              "tag2",
                            ],
                          },
                          rawDescription: "",
                          description: Immutable.List [
                          ],
                          opened: false,
                          id: 21,
                          nestingLevel: 1,
                        }
                      }
                      isSelected={false}
                      key="21"
                      onRef={[Function]}
                    >
                      <Header
                        color="rgba(38, 143, 214, 1)"
                        focusedHeader={null}
                        hasContent={false}
                        header={
                          Immutable.Map {
                            titleLine: Immutable.Map {
                              title: Immutable.List [
                                Immutable.Map {
                                  type: "text",
                                  contents: "A header with tags                                              ",
                                },
                              ],
                              rawTitle: "A header with tags                                              ",
                              todoKeyword: undefined,
                              tags: Immutable.List [
                                "tag1",
                                "tag2",
                              ],
                            },
                            rawDescription: "",
                            description: Immutable.List [
                            ],
                            opened: false,
                            id: 21,
                            nestingLevel: 1,
                          }
                        }
                        isSelected={false}
                        onRef={[Function]}
                      >
                        <div
                          className="header"
                          style={
                            Object {
                              "paddingLeft": 20,
                            }
                          }
                        >
                          <div
                            style={
                              Object {
                                "color": "rgba(38, 143, 214, 1)",
                                "marginLeft": -16,
                              }
                            }
                          >
                            *
                          </div>
                          <Connect(TitleLine)
                            color="rgba(38, 143, 214, 1)"
                            hasContent={false}
                            header={
                              Immutable.Map {
                                titleLine: Immutable.Map {
                                  title: Immutable.List [
                                    Immutable.Map {
                                      type: "text",
                                      contents: "A header with tags                                              ",
                                    },
                                  ],
                                  rawTitle: "A header with tags                                              ",
                                  todoKeyword: undefined,
                                  tags: Immutable.List [
                                    "tag1",
                                    "tag2",
                                  ],
                                },
                                rawDescription: "",
                                description: Immutable.List [
                                ],
                                opened: false,
                                id: 21,
                                nestingLevel: 1,
                              }
                            }
                            isSelected={false}
                          >
                            <TitleLine
                              color="rgba(38, 143, 214, 1)"
                              hasContent={false}
                              header={
                                Immutable.Map {
                                  titleLine: Immutable.Map {
                                    title: Immutable.List [
                                      Immutable.Map {
                                        type: "text",
                                        contents: "A header with tags                                              ",
                                      },
                                    ],
                                    rawTitle: "A header with tags                                              ",
                                    todoKeyword: undefined,
                                    tags: Immutable.List [
                                      "tag1",
                                      "tag2",
                                    ],
                                  },
                                  rawDescription: "",
                                  description: Immutable.List [
                                  ],
                                  opened: false,
                                  id: 21,
                                  nestingLevel: 1,
                                }
                              }
                              isSelected={false}
                              org={
                                Object {
                                  "addHeader": [Function],
                                  "addHeaderAndEdit": [Function],
                                  "addNewTableColumn": [Function],
                                  "addNewTableRow": [Function],
                                  "advanceTodoState": [Function],
                                  "applyOpennessState": [Function],
                                  "displayFile": [Function],
                                  "enterDescriptionEditMode": [Function],
                                  "enterTableEditMode": [Function],
                                  "enterTitleEditMode": [Function],
                                  "exitDescriptionEditMode": [Function],
                                  "exitTableEditMode": [Function],
                                  "exitTitleEditMode": [Function],
                                  "focusHeader": [Function],
                                  "moveHeaderDown": [Function],
                                  "moveHeaderLeft": [Function],
                                  "moveHeaderRight": [Function],
                                  "moveHeaderUp": [Function],
                                  "moveSubtreeLeft": [Function],
                                  "moveSubtreeRight": [Function],
                                  "moveTableColumnLeft": [Function],
                                  "moveTableColumnRight": [Function],
                                  "moveTableRowDown": [Function],
                                  "moveTableRowUp": [Function],
                                  "noOp": [Function],
                                  "openHeader": [Function],
                                  "removeHeader": [Function],
                                  "removeTableColumn": [Function],
                                  "removeTableRow": [Function],
                                  "selectHeader": [Function],
                                  "selectNextSiblingHeader": [Function],
                                  "selectNextVisibleHeader": [Function],
                                  "selectPreviousVisibleHeader": [Function],
                                  "setDirty": [Function],
                                  "setSelectedTableCellId": [Function],
                                  "stopDisplayingFile": [Function],
                                  "toggleHeaderOpened": [Function],
                                  "unfocusHeader": [Function],
                                  "updateHeaderDescription": [Function],
                                  "updateHeaderTitle": [Function],
                                  "updateTableCellValue": [Function],
                                }
                              }
                            >
                              <div
                                className="title-line nice-scroll"
                                onClick={[Function]}
                              >
                                <div>
                                  <span
                                    style={
                                      Object {
                                        "color": "rgba(38, 143, 214, 1)",
                                        "fontWeight": "bold",
                                      }
                                    }
                                  >
                                    <AttributedString
                                      parts={
                                        Immutable.List [
                                          Immutable.Map {
                                            type: "text",
                                            contents: "A header with tags                                              ",
                                          },
                                        ]
                                      }
                                    >
                                      <span>
                                        A header with tags
                                      </span>
                                    </AttributedString>
                                  </span>
                                  <div>
                                    <div
                                      className="header-tag"
                                      key="tag1"
                                    >
                                      tag1
                                    </div>
                                    <div
                                      className="header-tag"
                                      key="tag2"
                                    >
                                      tag2
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </TitleLine>
                          </Connect(TitleLine)>
                          <Connect(HeaderContent)
                            header={
                              Immutable.Map {
                                titleLine: Immutable.Map {
                                  title: Immutable.List [
                                    Immutable.Map {
                                      type: "text",
                                      contents: "A header with tags                                              ",
                                    },
                                  ],
                                  rawTitle: "A header with tags                                              ",
                                  todoKeyword: undefined,
                                  tags: Immutable.List [
                                    "tag1",
                                    "tag2",
                                  ],
                                },
                                rawDescription: "",
                                description: Immutable.List [
                                ],
                                opened: false,
                                id: 21,
                                nestingLevel: 1,
                              }
                            }
                          >
                            <HeaderContent
                              header={
                                Immutable.Map {
                                  titleLine: Immutable.Map {
                                    title: Immutable.List [
                                      Immutable.Map {
                                        type: "text",
                                        contents: "A header with tags                                              ",
                                      },
                                    ],
                                    rawTitle: "A header with tags                                              ",
                                    todoKeyword: undefined,
                                    tags: Immutable.List [
                                      "tag1",
                                      "tag2",
                                    ],
                                  },
                                  rawDescription: "",
                                  description: Immutable.List [
                                  ],
                                  opened: false,
                                  id: 21,
                                  nestingLevel: 1,
                                }
                              }
                              org={
                                Object {
                                  "addHeader": [Function],
                                  "addHeaderAndEdit": [Function],
                                  "addNewTableColumn": [Function],
                                  "addNewTableRow": [Function],
                                  "advanceTodoState": [Function],
                                  "applyOpennessState": [Function],
                                  "displayFile": [Function],
                                  "enterDescriptionEditMode": [Function],
                                  "enterTableEditMode": [Function],
                                  "enterTitleEditMode": [Function],
                                  "exitDescriptionEditMode": [Function],
                                  "exitTableEditMode": [Function],
                                  "exitTitleEditMode": [Function],
                                  "focusHeader": [Function],
                                  "moveHeaderDown": [Function],
                                  "moveHeaderLeft": [Function],
                                  "moveHeaderRight": [Function],
                                  "moveHeaderUp": [Function],
                                  "moveSubtreeLeft": [Function],
                                  "moveSubtreeRight": [Function],
                                  "moveTableColumnLeft": [Function],
                                  "moveTableColumnRight": [Function],
                                  "moveTableRowDown": [Function],
                                  "moveTableRowUp": [Function],
                                  "noOp": [Function],
                                  "openHeader": [Function],
                                  "removeHeader": [Function],
                                  "removeTableColumn": [Function],
                                  "removeTableRow": [Function],
                                  "selectHeader": [Function],
                                  "selectNextSiblingHeader": [Function],
                                  "selectNextVisibleHeader": [Function],
                                  "selectPreviousVisibleHeader": [Function],
                                  "setDirty": [Function],
                                  "setSelectedTableCellId": [Function],
                                  "stopDisplayingFile": [Function],
                                  "toggleHeaderOpened": [Function],
                                  "unfocusHeader": [Function],
                                  "updateHeaderDescription": [Function],
                                  "updateHeaderTitle": [Function],
                                  "updateTableCellValue": [Function],
                                }
                              }
                              selectedTableCellId={null}
                            >
                              <div />
                            </HeaderContent>
                          </Connect(HeaderContent)>
                        </div>
                      </Header>
                    </Connect(Header)>
                    <Connect(Header)
                      color="rgba(38, 143, 214, 1)"
                      hasContent={false}
                      header={
                        Immutable.Map {
                          titleLine: Immutable.Map {
                            title: Immutable.List [
                              Immutable.Map {
                                type: "text",
                                contents: "A header with ",
                              },
                              Immutable.Map {
                                type: "link",
                                contents: Immutable.Map {
                                  uri: "https://google.com",
                                  title: "a link",
                                },
                              },
                            ],
                            rawTitle: "A header with [[https://google.com][a link]]",
                            todoKeyword: undefined,
                            tags: Immutable.List [
                            ],
                          },
                          rawDescription: "",
                          description: Immutable.List [
                          ],
                          opened: false,
                          id: 22,
                          nestingLevel: 1,
                        }
                      }
                      isSelected={false}
                      key="22"
                      onRef={[Function]}
                    >
                      <Header
                        color="rgba(38, 143, 214, 1)"
                        focusedHeader={null}
                        hasContent={false}
                        header={
                          Immutable.Map {
                            titleLine: Immutable.Map {
                              title: Immutable.List [
                                Immutable.Map {
                                  type: "text",
                                  contents: "A header with ",
                                },
                                Immutable.Map {
                                  type: "link",
                                  contents: Immutable.Map {
                                    uri: "https://google.com",
                                    title: "a link",
                                  },
                                },
                              ],
                              rawTitle: "A header with [[https://google.com][a link]]",
                              todoKeyword: undefined,
                              tags: Immutable.List [
                              ],
                            },
                            rawDescription: "",
                            description: Immutable.List [
                            ],
                            opened: false,
                            id: 22,
                            nestingLevel: 1,
                          }
                        }
                        isSelected={false}
                        onRef={[Function]}
                      >
                        <div
                          className="header"
                          style={
                            Object {
                              "paddingLeft": 20,
                            }
                          }
                        >
                          <div
                            style={
                              Object {
                                "color": "rgba(38, 143, 214, 1)",
                                "marginLeft": -16,
                              }
                            }
                          >
                            *
                          </div>
                          <Connect(TitleLine)
                            color="rgba(38, 143, 214, 1)"
                            hasContent={false}
                            header={
                              Immutable.Map {
                                titleLine: Immutable.Map {
                                  title: Immutable.List [
                                    Immutable.Map {
                                      type: "text",
                                      contents: "A header with ",
                                    },
                                    Immutable.Map {
                                      type: "link",
                                      contents: Immutable.Map {
                                        uri: "https://google.com",
                                        title: "a link",
                                      },
                                    },
                                  ],
                                  rawTitle: "A header with [[https://google.com][a link]]",
                                  todoKeyword: undefined,
                                  tags: Immutable.List [
                                  ],
                                },
                                rawDescription: "",
                                description: Immutable.List [
                                ],
                                opened: false,
                                id: 22,
                                nestingLevel: 1,
                              }
                            }
                            isSelected={false}
                          >
                            <TitleLine
                              color="rgba(38, 143, 214, 1)"
                              hasContent={false}
                              header={
                                Immutable.Map {
                                  titleLine: Immutable.Map {
                                    title: Immutable.List [
                                      Immutable.Map {
                                        type: "text",
                                        contents: "A header with ",
                                      },
                                      Immutable.Map {
                                        type: "link",
                                        contents: Immutable.Map {
                                          uri: "https://google.com",
                                          title: "a link",
                                        },
                                      },
                                    ],
                                    rawTitle: "A header with [[https://google.com][a link]]",
                                    todoKeyword: undefined,
                                    tags: Immutable.List [
                                    ],
                                  },
                                  rawDescription: "",
                                  description: Immutable.List [
                                  ],
                                  opened: false,
                                  id: 22,
                                  nestingLevel: 1,
                                }
                              }
                              isSelected={false}
                              org={
                                Object {
                                  "addHeader": [Function],
                                  "addHeaderAndEdit": [Function],
                                  "addNewTableColumn": [Function],
                                  "addNewTableRow": [Function],
                                  "advanceTodoState": [Function],
                                  "applyOpennessState": [Function],
                                  "displayFile": [Function],
                                  "enterDescriptionEditMode": [Function],
                                  "enterTableEditMode": [Function],
                                  "enterTitleEditMode": [Function],
                                  "exitDescriptionEditMode": [Function],
                                  "exitTableEditMode": [Function],
                                  "exitTitleEditMode": [Function],
                                  "focusHeader": [Function],
                                  "moveHeaderDown": [Function],
                                  "moveHeaderLeft": [Function],
                                  "moveHeaderRight": [Function],
                                  "moveHeaderUp": [Function],
                                  "moveSubtreeLeft": [Function],
                                  "moveSubtreeRight": [Function],
                                  "moveTableColumnLeft": [Function],
                                  "moveTableColumnRight": [Function],
                                  "moveTableRowDown": [Function],
                                  "moveTableRowUp": [Function],
                                  "noOp": [Function],
                                  "openHeader": [Function],
                                  "removeHeader": [Function],
                                  "removeTableColumn": [Function],
                                  "removeTableRow": [Function],
                                  "selectHeader": [Function],
                                  "selectNextSiblingHeader": [Function],
                                  "selectNextVisibleHeader": [Function],
                                  "selectPreviousVisibleHeader": [Function],
                                  "setDirty": [Function],
                                  "setSelectedTableCellId": [Function],
                                  "stopDisplayingFile": [Function],
                                  "toggleHeaderOpened": [Function],
                                  "unfocusHeader": [Function],
                                  "updateHeaderDescription": [Function],
                                  "updateHeaderTitle": [Function],
                                  "updateTableCellValue": [Function],
                                }
                              }
                            >
                              <div
                                className="title-line nice-scroll"
                                onClick={[Function]}
                              >
                                <div>
                                  <span
                                    style={
                                      Object {
                                        "color": "rgba(38, 143, 214, 1)",
                                        "fontWeight": "bold",
                                      }
                                    }
                                  >
                                    <AttributedString
                                      parts={
                                        Immutable.List [
                                          Immutable.Map {
                                            type: "text",
                                            contents: "A header with ",
                                          },
                                          Immutable.Map {
                                            type: "link",
                                            contents: Immutable.Map {
                                              uri: "https://google.com",
                                              title: "a link",
                                            },
                                          },
                                        ]
                                      }
                                    >
                                      <span>
                                        A header with
                                        <a
                                          href="https://google.com"
                                          key="23"
                                        >
                                          a link
                                        </a>
                                      </span>
                                    </AttributedString>
                                  </span>
                                </div>
                              </div>
                            </TitleLine>
                          </Connect(TitleLine)>
                          <Connect(HeaderContent)
                            header={
                              Immutable.Map {
                                titleLine: Immutable.Map {
                                  title: Immutable.List [
                                    Immutable.Map {
                                      type: "text",
                                      contents: "A header with ",
                                    },
                                    Immutable.Map {
                                      type: "link",
                                      contents: Immutable.Map {
                                        uri: "https://google.com",
                                        title: "a link",
                                      },
                                    },
                                  ],
                                  rawTitle: "A header with [[https://google.com][a link]]",
                                  todoKeyword: undefined,
                                  tags: Immutable.List [
                                  ],
                                },
                                rawDescription: "",
                                description: Immutable.List [
                                ],
                                opened: false,
                                id: 22,
                                nestingLevel: 1,
                              }
                            }
                          >
                            <HeaderContent
                              header={
                                Immutable.Map {
                                  titleLine: Immutable.Map {
                                    title: Immutable.List [
                                      Immutable.Map {
                                        type: "text",
                                        contents: "A header with ",
                                      },
                                      Immutable.Map {
                                        type: "link",
                                        contents: Immutable.Map {
                                          uri: "https://google.com",
                                          title: "a link",
                                        },
                                      },
                                    ],
                                    rawTitle: "A header with [[https://google.com][a link]]",
                                    todoKeyword: undefined,
                                    tags: Immutable.List [
                                    ],
                                  },
                                  rawDescription: "",
                                  description: Immutable.List [
                                  ],
                                  opened: false,
                                  id: 22,
                                  nestingLevel: 1,
                                }
                              }
                              org={
                                Object {
                                  "addHeader": [Function],
                                  "addHeaderAndEdit": [Function],
                                  "addNewTableColumn": [Function],
                                  "addNewTableRow": [Function],
                                  "advanceTodoState": [Function],
                                  "applyOpennessState": [Function],
                                  "displayFile": [Function],
                                  "enterDescriptionEditMode": [Function],
                                  "enterTableEditMode": [Function],
                                  "enterTitleEditMode": [Function],
                                  "exitDescriptionEditMode": [Function],
                                  "exitTableEditMode": [Function],
                                  "exitTitleEditMode": [Function],
                                  "focusHeader": [Function],
                                  "moveHeaderDown": [Function],
                                  "moveHeaderLeft": [Function],
                                  "moveHeaderRight": [Function],
                                  "moveHeaderUp": [Function],
                                  "moveSubtreeLeft": [Function],
                                  "moveSubtreeRight": [Function],
                                  "moveTableColumnLeft": [Function],
                                  "moveTableColumnRight": [Function],
                                  "moveTableRowDown": [Function],
                                  "moveTableRowUp": [Function],
                                  "noOp": [Function],
                                  "openHeader": [Function],
                                  "removeHeader": [Function],
                                  "removeTableColumn": [Function],
                                  "removeTableRow": [Function],
                                  "selectHeader": [Function],
                                  "selectNextSiblingHeader": [Function],
                                  "selectNextVisibleHeader": [Function],
                                  "selectPreviousVisibleHeader": [Function],
                                  "setDirty": [Function],
                                  "setSelectedTableCellId": [Function],
                                  "stopDisplayingFile": [Function],
                                  "toggleHeaderOpened": [Function],
                                  "unfocusHeader": [Function],
                                  "updateHeaderDescription": [Function],
                                  "updateHeaderTitle": [Function],
                                  "updateTableCellValue": [Function],
                                }
                              }
                              selectedTableCellId={null}
                            >
                              <div />
                            </HeaderContent>
                          </Connect(HeaderContent)>
                        </div>
                      </Header>
                    </Connect(Header)>
                  </div>
                </HeaderList>
              </Connect(HeaderList)>
              <div
                className="dirty-indicator"
              >
                Unpushed changes
              </div>
              <Connect(ActionDrawer)>
                <ActionDrawer
                  captureTemplates={
                    Immutable.List [
                    ]
                  }
                  dropbox={
                    Object {
                      "authenticate": [Function],
                      "downloadFile": [Function],
                      "getDirectoryListing": [Function],
                      "pushBackup": [Function],
                      "pushCurrentFile": [Function],
                      "redownloadCurrentFile": [Function],
                      "setCurrentFileBrowserDirectoryListing": [Function],
                      "signOut": [Function],
                    }
                  }
                  historyCount={1}
                  isDirty={true}
                  isFocusedHeaderActive={false}
                  org={
                    Object {
                      "addHeader": [Function],
                      "addHeaderAndEdit": [Function],
                      "addNewTableColumn": [Function],
                      "addNewTableRow": [Function],
                      "advanceTodoState": [Function],
                      "applyOpennessState": [Function],
                      "displayFile": [Function],
                      "enterDescriptionEditMode": [Function],
                      "enterTableEditMode": [Function],
                      "enterTitleEditMode": [Function],
                      "exitDescriptionEditMode": [Function],
                      "exitTableEditMode": [Function],
                      "exitTitleEditMode": [Function],
                      "focusHeader": [Function],
                      "moveHeaderDown": [Function],
                      "moveHeaderLeft": [Function],
                      "moveHeaderRight": [Function],
                      "moveHeaderUp": [Function],
                      "moveSubtreeLeft": [Function],
                      "moveSubtreeRight": [Function],
                      "moveTableColumnLeft": [Function],
                      "moveTableColumnRight": [Function],
                      "moveTableRowDown": [Function],
                      "moveTableRowUp": [Function],
                      "noOp": [Function],
                      "openHeader": [Function],
                      "removeHeader": [Function],
                      "removeTableColumn": [Function],
                      "removeTableRow": [Function],
                      "selectHeader": [Function],
                      "selectNextSiblingHeader": [Function],
                      "selectNextVisibleHeader": [Function],
                      "selectPreviousVisibleHeader": [Function],
                      "setDirty": [Function],
                      "setSelectedTableCellId": [Function],
                      "stopDisplayingFile": [Function],
                      "toggleHeaderOpened": [Function],
                      "unfocusHeader": [Function],
                      "updateHeaderDescription": [Function],
                      "updateHeaderTitle": [Function],
                      "updateTableCellValue": [Function],
                    }
                  }
                  path="/some/test/file"
                  selectedHeaderId={16}
                  selectedTableCellId={null}
                  undo={
                    Object {
                      "clearHistory": [Function],
                      "jump": [Function],
                      "jumpToFuture": [Function],
                      "jumpToPast": [Function],
                      "redo": [Function],
                      "undo": [Function],
                    }
                  }
                >
                  <div
                    className="action-drawer-container nice-scroll"
                  >
                    <ActionButton
                      iconName="check"
                      isDisabled={false}
                      onClick={[Function]}
                    >
                      <button
                        className="btn btn--circle action-drawer__btn fas fa-lg fa-check"
                        onClick={[Function]}
                      />
                    </ActionButton>
                    <ActionButton
                      iconName="pencil-alt"
                      isDisabled={false}
                      onClick={[Function]}
                    >
                      <button
                        className="btn btn--circle action-drawer__btn fas fa-lg fa-pencil-alt"
                        onClick={[Function]}
                      />
                    </ActionButton>
                    <ActionButton
                      iconName="edit"
                      isDisabled={false}
                      onClick={[Function]}
                    >
                      <button
                        className="btn btn--circle action-drawer__btn fas fa-lg fa-edit"
                        onClick={[Function]}
                      />
                    </ActionButton>
                    <ActionButton
                      iconName="plus"
                      isDisabled={false}
                      onClick={[Function]}
                    >
                      <button
                        className="btn btn--circle action-drawer__btn fas fa-lg fa-plus"
                        onClick={[Function]}
                      />
                    </ActionButton>
                    <ActionButton
                      iconName="times"
                      isDisabled={false}
                      onClick={[Function]}
                    >
                      <button
                        className="btn btn--circle action-drawer__btn fas fa-lg fa-times"
                        onClick={[Function]}
                      />
                    </ActionButton>
                    <ActionButton
                      iconName="arrow-up"
                      isDisabled={false}
                      onClick={[Function]}
                    >
                      <button
                        className="btn btn--circle action-drawer__btn fas fa-lg fa-arrow-up"
                        onClick={[Function]}
                      />
                    </ActionButton>
                    <ActionButton
                      iconName="arrow-down"
                      isDisabled={false}
                      onClick={[Function]}
                    >
                      <button
                        className="btn btn--circle action-drawer__btn fas fa-lg fa-arrow-down"
                        onClick={[Function]}
                      />
                    </ActionButton>
                    <ActionButton
                      iconName="arrow-left"
                      isDisabled={false}
                      onClick={[Function]}
                    >
                      <button
                        className="btn btn--circle action-drawer__btn fas fa-lg fa-arrow-left"
                        onClick={[Function]}
                      />
                    </ActionButton>
                    <ActionButton
                      iconName="arrow-right"
                      isDisabled={false}
                      onClick={[Function]}
                    >
                      <button
                        className="btn btn--circle action-drawer__btn fas fa-lg fa-arrow-right"
                        onClick={[Function]}
                      />
                    </ActionButton>
                    <ActionButton
                      iconName="chevron-left"
                      isDisabled={false}
                      onClick={[Function]}
                    >
                      <button
                        className="btn btn--circle action-drawer__btn fas fa-lg fa-chevron-left"
                        onClick={[Function]}
                      />
                    </ActionButton>
                    <ActionButton
                      iconName="chevron-right"
                      isDisabled={false}
                      onClick={[Function]}
                    >
                      <button
                        className="btn btn--circle action-drawer__btn fas fa-lg fa-chevron-right"
                        onClick={[Function]}
                      />
                    </ActionButton>
                    <ActionButton
                      iconName="compress"
                      isDisabled={false}
                      onClick={[Function]}
                    >
                      <button
                        className="btn btn--circle action-drawer__btn fas fa-lg fa-compress"
                        onClick={[Function]}
                      />
                    </ActionButton>
                    <ActionButton
                      iconName="undo"
                      isDisabled={true}
                      onClick={[Function]}
                    >
                      <button
                        className="btn btn--circle action-drawer__btn fas fa-lg fa-undo btn--disabled"
                        onClick={[Function]}
                      />
                    </ActionButton>
                    <ActionButton
                      iconName="cloud-upload-alt"
                      onClick={[Function]}
                    >
                      <button
                        className="btn btn--circle action-drawer__btn fas fa-lg fa-cloud-upload-alt"
                        onClick={[Function]}
                      />
                    </ActionButton>
                    <ActionButton
                      iconName="cloud-download-alt"
                      onClick={[Function]}
                    >
                      <button
                        className="btn btn--circle action-drawer__btn fas fa-lg fa-cloud-download-alt"
                        onClick={[Function]}
                      />
                    </ActionButton>
                  </div>
                </ActionDrawer>
              </Connect(ActionDrawer)>
            </div>
          </HotKeys>
        </OrgFile>
      </Connect(OrgFile)>
    </Provider>
  </Router>
</MemoryRouter>
`;

exports[`Can select a header in an org file 1`] = `
<MemoryRouter
  keyLength={0}
>
  <Router
    history={
      Object {
        "action": "POP",
        "block": [Function],
        "canGo": [Function],
        "createHref": [Function],
        "entries": Array [
          Object {
            "hash": "",
            "pathname": "/",
            "search": "",
            "state": undefined,
          },
        ],
        "go": [Function],
        "goBack": [Function],
        "goForward": [Function],
        "index": 0,
        "length": 1,
        "listen": [Function],
        "location": Object {
          "hash": "",
          "pathname": "/",
          "search": "",
          "state": undefined,
        },
        "push": [Function],
        "replace": [Function],
      }
    }
  >
    <Provider
      store={
        Object {
          "dispatch": [Function],
          "getState": [Function],
          "replaceReducer": [Function],
          "subscribe": [Function],
          Symbol(observable): [Function],
        }
      }
    >
      <Connect(OrgFile)
        path="/some/test/file"
      >
        <OrgFile
          base={
            Object {
              "hideLoadingMessage": [Function],
              "loadStaticFile": [Function],
              "restoreBaseSettings": [Function],
              "setActiveModalPage": [Function],
              "setBulletStyle": [Function],
              "setCustomKeybinding": [Function],
              "setFontSize": [Function],
              "setHasUnseenWhatsNew": [Function],
              "setLastSeenWhatsNewHeader": [Function],
              "setLastViewedFile": [Function],
              "setLoadingMessage": [Function],
              "setShouldStoreSettingsInDropbox": [Function],
              "setShouldTapTodoToAdvance": [Function],
              "unloadStaticFile": [Function],
            }
          }
          customKeybindings={
            Immutable.Map {
            }
          }
          dropbox={
            Object {
              "authenticate": [Function],
              "downloadFile": [Function],
              "getDirectoryListing": [Function],
              "pushBackup": [Function],
              "pushCurrentFile": [Function],
              "redownloadCurrentFile": [Function],
              "setCurrentFileBrowserDirectoryListing": [Function],
              "signOut": [Function],
            }
          }
          headers={
            Immutable.List [
              Immutable.Map {
                titleLine: Immutable.Map {
                  title: Immutable.List [
                    Immutable.Map {
                      type: "text",
                      contents: "Top level header",
                    },
                  ],
                  rawTitle: "Top level header",
                  todoKeyword: undefined,
                  tags: Immutable.List [
                  ],
                },
                rawDescription: "",
                description: Immutable.List [
                ],
                opened: true,
                id: 8,
                nestingLevel: 1,
              },
              Immutable.Map {
                titleLine: Immutable.Map {
                  title: Immutable.List [
                    Immutable.Map {
                      type: "text",
                      contents: "A nested header",
                    },
                  ],
                  rawTitle: "A nested header",
                  todoKeyword: undefined,
                  tags: Immutable.List [
                  ],
                },
                rawDescription: "",
                description: Immutable.List [
                ],
                opened: false,
                id: 9,
                nestingLevel: 2,
              },
              Immutable.Map {
                titleLine: Immutable.Map {
                  title: Immutable.List [
                    Immutable.Map {
                      type: "text",
                      contents: "A todo item",
                    },
                  ],
                  rawTitle: "A todo item",
                  todoKeyword: "TODO",
                  tags: Immutable.List [
                  ],
                },
                rawDescription: "",
                description: Immutable.List [
                ],
                opened: false,
                id: 10,
                nestingLevel: 2,
              },
              Immutable.Map {
                titleLine: Immutable.Map {
                  title: Immutable.List [
                    Immutable.Map {
                      type: "text",
                      contents: "A finished todo item",
                    },
                  ],
                  rawTitle: "A finished todo item",
                  todoKeyword: "DONE",
                  tags: Immutable.List [
                  ],
                },
                rawDescription: "",
                description: Immutable.List [
                ],
                opened: false,
                id: 11,
                nestingLevel: 2,
              },
              Immutable.Map {
                titleLine: Immutable.Map {
                  title: Immutable.List [
                    Immutable.Map {
                      type: "text",
                      contents: "Another top level header",
                    },
                  ],
                  rawTitle: "Another top level header",
                  todoKeyword: undefined,
                  tags: Immutable.List [
                  ],
                },
                rawDescription: "Some description content",
                description: Immutable.List [
                  Immutable.Map {
                    type: "text",
                    contents: "Some description content",
                  },
                ],
                opened: false,
                id: 12,
                nestingLevel: 1,
              },
              Immutable.Map {
                titleLine: Immutable.Map {
                  title: Immutable.List [
                    Immutable.Map {
                      type: "text",
                      contents: "A header with tags                                              ",
                    },
                  ],
                  rawTitle: "A header with tags                                              ",
                  todoKeyword: undefined,
                  tags: Immutable.List [
                    "tag1",
                    "tag2",
                  ],
                },
                rawDescription: "",
                description: Immutable.List [
                ],
                opened: false,
                id: 13,
                nestingLevel: 1,
              },
              Immutable.Map {
                titleLine: Immutable.Map {
                  title: Immutable.List [
                    Immutable.Map {
                      type: "text",
                      contents: "A header with ",
                    },
                    Immutable.Map {
                      type: "link",
                      contents: Immutable.Map {
                        uri: "https://google.com",
                        title: "a link",
                      },
                    },
                  ],
                  rawTitle: "A header with [[https://google.com][a link]]",
                  todoKeyword: undefined,
                  tags: Immutable.List [
                  ],
                },
                rawDescription: "",
                description: Immutable.List [
                ],
                opened: false,
                id: 14,
                nestingLevel: 1,
              },
            ]
          }
          loadedPath="/some/test/file"
          org={
            Object {
              "addHeader": [Function],
              "addHeaderAndEdit": [Function],
              "addNewTableColumn": [Function],
              "addNewTableRow": [Function],
              "advanceTodoState": [Function],
              "applyOpennessState": [Function],
              "displayFile": [Function],
              "enterDescriptionEditMode": [Function],
              "enterTableEditMode": [Function],
              "enterTitleEditMode": [Function],
              "exitDescriptionEditMode": [Function],
              "exitTableEditMode": [Function],
              "exitTitleEditMode": [Function],
              "focusHeader": [Function],
              "moveHeaderDown": [Function],
              "moveHeaderLeft": [Function],
              "moveHeaderRight": [Function],
              "moveHeaderUp": [Function],
              "moveSubtreeLeft": [Function],
              "moveSubtreeRight": [Function],
              "moveTableColumnLeft": [Function],
              "moveTableColumnRight": [Function],
              "moveTableRowDown": [Function],
              "moveTableRowUp": [Function],
              "noOp": [Function],
              "openHeader": [Function],
              "removeHeader": [Function],
              "removeTableColumn": [Function],
              "removeTableRow": [Function],
              "selectHeader": [Function],
              "selectNextSiblingHeader": [Function],
              "selectNextVisibleHeader": [Function],
              "selectPreviousVisibleHeader": [Function],
              "setDirty": [Function],
              "setSelectedTableCellId": [Function],
              "stopDisplayingFile": [Function],
              "toggleHeaderOpened": [Function],
              "unfocusHeader": [Function],
              "updateHeaderDescription": [Function],
              "updateHeaderTitle": [Function],
              "updateTableCellValue": [Function],
            }
          }
          path="/some/test/file"
          selectedHeaderId={8}
          undo={
            Object {
              "clearHistory": [Function],
              "jump": [Function],
              "jumpToFuture": [Function],
              "jumpToPast": [Function],
              "redo": [Function],
              "undo": [Function],
            }
          }
        >
          <HotKeys
            handlers={
              Object {
                "addHeader": [Function],
                "advanceTodo": [Function],
                "editDescription": [Function],
                "editTitle": [Function],
                "exitEditMode": [Function],
                "moveHeaderDown": [Function],
                "moveHeaderLeft": [Function],
                "moveHeaderRight": [Function],
                "moveHeaderUp": [Function],
                "removeHeader": [Function],
                "selectNextVisibleHeader": [Function],
                "selectPreviousVisibleHeader": [Function],
                "toggleHeaderOpened": [Function],
                "undo": [Function],
              }
            }
            keyMap={
              Object {
                "addHeader": "ctrl+enter",
                "advanceTodo": "ctrl+t",
                "editDescription": "ctrl+d",
                "editTitle": "ctrl+h",
                "exitEditMode": "command+enter",
                "moveHeaderDown": "ctrl+command+n",
                "moveHeaderLeft": "ctrl+command+b",
                "moveHeaderRight": "ctrl+command+f",
                "moveHeaderUp": "ctrl+command+p",
                "removeHeader": "backspace",
                "selectNextVisibleHeader": "ctrl+n",
                "selectPreviousVisibleHeader": "ctrl+p",
                "toggleHeaderOpened": "tab",
                "undo": "ctrl+shift+-",
              }
            }
          >
            <div
              className="org-file-container"
              tabIndex="-1"
            >
              <Connect(HeaderList)>
                <HeaderList
                  headers={
                    Immutable.List [
                      Immutable.Map {
                        titleLine: Immutable.Map {
                          title: Immutable.List [
                            Immutable.Map {
                              type: "text",
                              contents: "Top level header",
                            },
                          ],
                          rawTitle: "Top level header",
                          todoKeyword: undefined,
                          tags: Immutable.List [
                          ],
                        },
                        rawDescription: "",
                        description: Immutable.List [
                        ],
                        opened: true,
                        id: 8,
                        nestingLevel: 1,
                      },
                      Immutable.Map {
                        titleLine: Immutable.Map {
                          title: Immutable.List [
                            Immutable.Map {
                              type: "text",
                              contents: "A nested header",
                            },
                          ],
                          rawTitle: "A nested header",
                          todoKeyword: undefined,
                          tags: Immutable.List [
                          ],
                        },
                        rawDescription: "",
                        description: Immutable.List [
                        ],
                        opened: false,
                        id: 9,
                        nestingLevel: 2,
                      },
                      Immutable.Map {
                        titleLine: Immutable.Map {
                          title: Immutable.List [
                            Immutable.Map {
                              type: "text",
                              contents: "A todo item",
                            },
                          ],
                          rawTitle: "A todo item",
                          todoKeyword: "TODO",
                          tags: Immutable.List [
                          ],
                        },
                        rawDescription: "",
                        description: Immutable.List [
                        ],
                        opened: false,
                        id: 10,
                        nestingLevel: 2,
                      },
                      Immutable.Map {
                        titleLine: Immutable.Map {
                          title: Immutable.List [
                            Immutable.Map {
                              type: "text",
                              contents: "A finished todo item",
                            },
                          ],
                          rawTitle: "A finished todo item",
                          todoKeyword: "DONE",
                          tags: Immutable.List [
                          ],
                        },
                        rawDescription: "",
                        description: Immutable.List [
                        ],
                        opened: false,
                        id: 11,
                        nestingLevel: 2,
                      },
                      Immutable.Map {
                        titleLine: Immutable.Map {
                          title: Immutable.List [
                            Immutable.Map {
                              type: "text",
                              contents: "Another top level header",
                            },
                          ],
                          rawTitle: "Another top level header",
                          todoKeyword: undefined,
                          tags: Immutable.List [
                          ],
                        },
                        rawDescription: "Some description content",
                        description: Immutable.List [
                          Immutable.Map {
                            type: "text",
                            contents: "Some description content",
                          },
                        ],
                        opened: false,
                        id: 12,
                        nestingLevel: 1,
                      },
                      Immutable.Map {
                        titleLine: Immutable.Map {
                          title: Immutable.List [
                            Immutable.Map {
                              type: "text",
                              contents: "A header with tags                                              ",
                            },
                          ],
                          rawTitle: "A header with tags                                              ",
                          todoKeyword: undefined,
                          tags: Immutable.List [
                            "tag1",
                            "tag2",
                          ],
                        },
                        rawDescription: "",
                        description: Immutable.List [
                        ],
                        opened: false,
                        id: 13,
                        nestingLevel: 1,
                      },
                      Immutable.Map {
                        titleLine: Immutable.Map {
                          title: Immutable.List [
                            Immutable.Map {
                              type: "text",
                              contents: "A header with ",
                            },
                            Immutable.Map {
                              type: "link",
                              contents: Immutable.Map {
                                uri: "https://google.com",
                                title: "a link",
                              },
                            },
                          ],
                          rawTitle: "A header with [[https://google.com][a link]]",
                          todoKeyword: undefined,
                          tags: Immutable.List [
                          ],
                        },
                        rawDescription: "",
                        description: Immutable.List [
                        ],
                        opened: false,
                        id: 14,
                        nestingLevel: 1,
                      },
                    ]
                  }
                  selectedHeaderId={8}
                >
                  <div
                    className="header-list-container"
                  >
                    <Connect(Header)
                      color="rgba(38, 143, 214, 1)"
                      hasContent={true}
                      header={
                        Immutable.Map {
                          titleLine: Immutable.Map {
                            title: Immutable.List [
                              Immutable.Map {
                                type: "text",
                                contents: "Top level header",
                              },
                            ],
                            rawTitle: "Top level header",
                            todoKeyword: undefined,
                            tags: Immutable.List [
                            ],
                          },
                          rawDescription: "",
                          description: Immutable.List [
                          ],
                          opened: true,
                          id: 8,
                          nestingLevel: 1,
                        }
                      }
                      isSelected={true}
                      key="8"
                      onRef={[Function]}
                    >
                      <Header
                        color="rgba(38, 143, 214, 1)"
                        focusedHeader={null}
                        hasContent={true}
                        header={
                          Immutable.Map {
                            titleLine: Immutable.Map {
                              title: Immutable.List [
                                Immutable.Map {
                                  type: "text",
                                  contents: "Top level header",
                                },
                              ],
                              rawTitle: "Top level header",
                              todoKeyword: undefined,
                              tags: Immutable.List [
                              ],
                            },
                            rawDescription: "",
                            description: Immutable.List [
                            ],
                            opened: true,
                            id: 8,
                            nestingLevel: 1,
                          }
                        }
                        isSelected={true}
                        onRef={[Function]}
                      >
                        <div
                          className="header header--selected"
                          style={
                            Object {
                              "paddingLeft": 20,
                            }
                          }
                        >
                          <div
                            style={
                              Object {
                                "color": "rgba(38, 143, 214, 1)",
                                "marginLeft": -16,
                              }
                            }
                          >
                            *
                          </div>
                          <Connect(TitleLine)
                            color="rgba(38, 143, 214, 1)"
                            hasContent={true}
                            header={
                              Immutable.Map {
                                titleLine: Immutable.Map {
                                  title: Immutable.List [
                                    Immutable.Map {
                                      type: "text",
                                      contents: "Top level header",
                                    },
                                  ],
                                  rawTitle: "Top level header",
                                  todoKeyword: undefined,
                                  tags: Immutable.List [
                                  ],
                                },
                                rawDescription: "",
                                description: Immutable.List [
                                ],
                                opened: true,
                                id: 8,
                                nestingLevel: 1,
                              }
                            }
                            isSelected={true}
                          >
                            <TitleLine
                              color="rgba(38, 143, 214, 1)"
                              hasContent={true}
                              header={
                                Immutable.Map {
                                  titleLine: Immutable.Map {
                                    title: Immutable.List [
                                      Immutable.Map {
                                        type: "text",
                                        contents: "Top level header",
                                      },
                                    ],
                                    rawTitle: "Top level header",
                                    todoKeyword: undefined,
                                    tags: Immutable.List [
                                    ],
                                  },
                                  rawDescription: "",
                                  description: Immutable.List [
                                  ],
                                  opened: true,
                                  id: 8,
                                  nestingLevel: 1,
                                }
                              }
                              isSelected={true}
                              org={
                                Object {
                                  "addHeader": [Function],
                                  "addHeaderAndEdit": [Function],
                                  "addNewTableColumn": [Function],
                                  "addNewTableRow": [Function],
                                  "advanceTodoState": [Function],
                                  "applyOpennessState": [Function],
                                  "displayFile": [Function],
                                  "enterDescriptionEditMode": [Function],
                                  "enterTableEditMode": [Function],
                                  "enterTitleEditMode": [Function],
                                  "exitDescriptionEditMode": [Function],
                                  "exitTableEditMode": [Function],
                                  "exitTitleEditMode": [Function],
                                  "focusHeader": [Function],
                                  "moveHeaderDown": [Function],
                                  "moveHeaderLeft": [Function],
                                  "moveHeaderRight": [Function],
                                  "moveHeaderUp": [Function],
                                  "moveSubtreeLeft": [Function],
                                  "moveSubtreeRight": [Function],
                                  "moveTableColumnLeft": [Function],
                                  "moveTableColumnRight": [Function],
                                  "moveTableRowDown": [Function],
                                  "moveTableRowUp": [Function],
                                  "noOp": [Function],
                                  "openHeader": [Function],
                                  "removeHeader": [Function],
                                  "removeTableColumn": [Function],
                                  "removeTableRow": [Function],
                                  "selectHeader": [Function],
                                  "selectNextSiblingHeader": [Function],
                                  "selectNextVisibleHeader": [Function],
                                  "selectPreviousVisibleHeader": [Function],
                                  "setDirty": [Function],
                                  "setSelectedTableCellId": [Function],
                                  "stopDisplayingFile": [Function],
                                  "toggleHeaderOpened": [Function],
                                  "unfocusHeader": [Function],
                                  "updateHeaderDescription": [Function],
                                  "updateHeaderTitle": [Function],
                                  "updateTableCellValue": [Function],
                                }
                              }
                            >
                              <div
                                className="title-line nice-scroll"
                                onClick={[Function]}
                              >
                                <div>
                                  <span
                                    style={
                                      Object {
                                        "color": "rgba(38, 143, 214, 1)",
                                        "fontWeight": "bold",
                                      }
                                    }
                                  >
                                    <AttributedString
                                      parts={
                                        Immutable.List [
                                          Immutable.Map {
                                            type: "text",
                                            contents: "Top level header",
                                          },
                                        ]
                                      }
                                    >
                                      <span>
                                        Top level header
                                      </span>
                                    </AttributedString>
                                  </span>
                                </div>
                              </div>
                            </TitleLine>
                          </Connect(TitleLine)>
                          <Connect(HeaderContent)
                            header={
                              Immutable.Map {
                                titleLine: Immutable.Map {
                                  title: Immutable.List [
                                    Immutable.Map {
                                      type: "text",
                                      contents: "Top level header",
                                    },
                                  ],
                                  rawTitle: "Top level header",
                                  todoKeyword: undefined,
                                  tags: Immutable.List [
                                  ],
                                },
                                rawDescription: "",
                                description: Immutable.List [
                                ],
                                opened: true,
                                id: 8,
                                nestingLevel: 1,
                              }
                            }
                          >
                            <HeaderContent
                              header={
                                Immutable.Map {
                                  titleLine: Immutable.Map {
                                    title: Immutable.List [
                                      Immutable.Map {
                                        type: "text",
                                        contents: "Top level header",
                                      },
                                    ],
                                    rawTitle: "Top level header",
                                    todoKeyword: undefined,
                                    tags: Immutable.List [
                                    ],
                                  },
                                  rawDescription: "",
                                  description: Immutable.List [
                                  ],
                                  opened: true,
                                  id: 8,
                                  nestingLevel: 1,
                                }
                              }
                              org={
                                Object {
                                  "addHeader": [Function],
                                  "addHeaderAndEdit": [Function],
                                  "addNewTableColumn": [Function],
                                  "addNewTableRow": [Function],
                                  "advanceTodoState": [Function],
                                  "applyOpennessState": [Function],
                                  "displayFile": [Function],
                                  "enterDescriptionEditMode": [Function],
                                  "enterTableEditMode": [Function],
                                  "enterTitleEditMode": [Function],
                                  "exitDescriptionEditMode": [Function],
                                  "exitTableEditMode": [Function],
                                  "exitTitleEditMode": [Function],
                                  "focusHeader": [Function],
                                  "moveHeaderDown": [Function],
                                  "moveHeaderLeft": [Function],
                                  "moveHeaderRight": [Function],
                                  "moveHeaderUp": [Function],
                                  "moveSubtreeLeft": [Function],
                                  "moveSubtreeRight": [Function],
                                  "moveTableColumnLeft": [Function],
                                  "moveTableColumnRight": [Function],
                                  "moveTableRowDown": [Function],
                                  "moveTableRowUp": [Function],
                                  "noOp": [Function],
                                  "openHeader": [Function],
                                  "removeHeader": [Function],
                                  "removeTableColumn": [Function],
                                  "removeTableRow": [Function],
                                  "selectHeader": [Function],
                                  "selectNextSiblingHeader": [Function],
                                  "selectNextVisibleHeader": [Function],
                                  "selectPreviousVisibleHeader": [Function],
                                  "setDirty": [Function],
                                  "setSelectedTableCellId": [Function],
                                  "stopDisplayingFile": [Function],
                                  "toggleHeaderOpened": [Function],
                                  "unfocusHeader": [Function],
                                  "updateHeaderDescription": [Function],
                                  "updateHeaderTitle": [Function],
                                  "updateTableCellValue": [Function],
                                }
                              }
                              selectedTableCellId={null}
                            >
                              <div
                                className="header-content-container nice-scroll"
                              >
                                <AttributedString
                                  onExitTableEditMode={[Function]}
                                  onTableCellSelect={[Function]}
                                  onTableCellValueUpdate={[Function]}
                                  parts={
                                    Immutable.List [
                                    ]
                                  }
                                  selectedTableCellId={null}
                                >
                                  <span>
                                    <undefined />
                                  </span>
                                </AttributedString>
                              </div>
                            </HeaderContent>
                          </Connect(HeaderContent)>
                        </div>
                      </Header>
                    </Connect(Header)>
                    <Connect(Header)
                      color="rgba(42, 164, 168, 1)"
                      hasContent={false}
                      header={
                        Immutable.Map {
                          titleLine: Immutable.Map {
                            title: Immutable.List [
                              Immutable.Map {
                                type: "text",
                                contents: "A nested header",
                              },
                            ],
                            rawTitle: "A nested header",
                            todoKeyword: undefined,
                            tags: Immutable.List [
                            ],
                          },
                          rawDescription: "",
                          description: Immutable.List [
                          ],
                          opened: false,
                          id: 9,
                          nestingLevel: 2,
                        }
                      }
                      isSelected={false}
                      key="9"
                      onRef={[Function]}
                    >
                      <Header
                        color="rgba(42, 164, 168, 1)"
                        focusedHeader={null}
                        hasContent={false}
                        header={
                          Immutable.Map {
                            titleLine: Immutable.Map {
                              title: Immutable.List [
                                Immutable.Map {
                                  type: "text",
                                  contents: "A nested header",
                                },
                              ],
                              rawTitle: "A nested header",
                              todoKeyword: undefined,
                              tags: Immutable.List [
                              ],
                            },
                            rawDescription: "",
                            description: Immutable.List [
                            ],
                            opened: false,
                            id: 9,
                            nestingLevel: 2,
                          }
                        }
                        isSelected={false}
                        onRef={[Function]}
                      >
                        <div
                          className="header"
                          style={
                            Object {
                              "paddingLeft": 40,
                            }
                          }
                        >
                          <div
                            style={
                              Object {
                                "color": "rgba(42, 164, 168, 1)",
                                "marginLeft": -16,
                              }
                            }
                          >
                            *
                          </div>
                          <Connect(TitleLine)
                            color="rgba(42, 164, 168, 1)"
                            hasContent={false}
                            header={
                              Immutable.Map {
                                titleLine: Immutable.Map {
                                  title: Immutable.List [
                                    Immutable.Map {
                                      type: "text",
                                      contents: "A nested header",
                                    },
                                  ],
                                  rawTitle: "A nested header",
                                  todoKeyword: undefined,
                                  tags: Immutable.List [
                                  ],
                                },
                                rawDescription: "",
                                description: Immutable.List [
                                ],
                                opened: false,
                                id: 9,
                                nestingLevel: 2,
                              }
                            }
                            isSelected={false}
                          >
                            <TitleLine
                              color="rgba(42, 164, 168, 1)"
                              hasContent={false}
                              header={
                                Immutable.Map {
                                  titleLine: Immutable.Map {
                                    title: Immutable.List [
                                      Immutable.Map {
                                        type: "text",
                                        contents: "A nested header",
                                      },
                                    ],
                                    rawTitle: "A nested header",
                                    todoKeyword: undefined,
                                    tags: Immutable.List [
                                    ],
                                  },
                                  rawDescription: "",
                                  description: Immutable.List [
                                  ],
                                  opened: false,
                                  id: 9,
                                  nestingLevel: 2,
                                }
                              }
                              isSelected={false}
                              org={
                                Object {
                                  "addHeader": [Function],
                                  "addHeaderAndEdit": [Function],
                                  "addNewTableColumn": [Function],
                                  "addNewTableRow": [Function],
                                  "advanceTodoState": [Function],
                                  "applyOpennessState": [Function],
                                  "displayFile": [Function],
                                  "enterDescriptionEditMode": [Function],
                                  "enterTableEditMode": [Function],
                                  "enterTitleEditMode": [Function],
                                  "exitDescriptionEditMode": [Function],
                                  "exitTableEditMode": [Function],
                                  "exitTitleEditMode": [Function],
                                  "focusHeader": [Function],
                                  "moveHeaderDown": [Function],
                                  "moveHeaderLeft": [Function],
                                  "moveHeaderRight": [Function],
                                  "moveHeaderUp": [Function],
                                  "moveSubtreeLeft": [Function],
                                  "moveSubtreeRight": [Function],
                                  "moveTableColumnLeft": [Function],
                                  "moveTableColumnRight": [Function],
                                  "moveTableRowDown": [Function],
                                  "moveTableRowUp": [Function],
                                  "noOp": [Function],
                                  "openHeader": [Function],
                                  "removeHeader": [Function],
                                  "removeTableColumn": [Function],
                                  "removeTableRow": [Function],
                                  "selectHeader": [Function],
                                  "selectNextSiblingHeader": [Function],
                                  "selectNextVisibleHeader": [Function],
                                  "selectPreviousVisibleHeader": [Function],
                                  "setDirty": [Function],
                                  "setSelectedTableCellId": [Function],
                                  "stopDisplayingFile": [Function],
                                  "toggleHeaderOpened": [Function],
                                  "unfocusHeader": [Function],
                                  "updateHeaderDescription": [Function],
                                  "updateHeaderTitle": [Function],
                                  "updateTableCellValue": [Function],
                                }
                              }
                            >
                              <div
                                className="title-line nice-scroll"
                                onClick={[Function]}
                              >
                                <div>
                                  <span
                                    style={
                                      Object {
                                        "color": "rgba(42, 164, 168, 1)",
                                        "fontWeight": "bold",
                                      }
                                    }
                                  >
                                    <AttributedString
                                      parts={
                                        Immutable.List [
                                          Immutable.Map {
                                            type: "text",
                                            contents: "A nested header",
                                          },
                                        ]
                                      }
                                    >
                                      <span>
                                        A nested header
                                      </span>
                                    </AttributedString>
                                  </span>
                                </div>
                              </div>
                            </TitleLine>
                          </Connect(TitleLine)>
                          <Connect(HeaderContent)
                            header={
                              Immutable.Map {
                                titleLine: Immutable.Map {
                                  title: Immutable.List [
                                    Immutable.Map {
                                      type: "text",
                                      contents: "A nested header",
                                    },
                                  ],
                                  rawTitle: "A nested header",
                                  todoKeyword: undefined,
                                  tags: Immutable.List [
                                  ],
                                },
                                rawDescription: "",
                                description: Immutable.List [
                                ],
                                opened: false,
                                id: 9,
                                nestingLevel: 2,
                              }
                            }
                          >
                            <HeaderContent
                              header={
                                Immutable.Map {
                                  titleLine: Immutable.Map {
                                    title: Immutable.List [
                                      Immutable.Map {
                                        type: "text",
                                        contents: "A nested header",
                                      },
                                    ],
                                    rawTitle: "A nested header",
                                    todoKeyword: undefined,
                                    tags: Immutable.List [
                                    ],
                                  },
                                  rawDescription: "",
                                  description: Immutable.List [
                                  ],
                                  opened: false,
                                  id: 9,
                                  nestingLevel: 2,
                                }
                              }
                              org={
                                Object {
                                  "addHeader": [Function],
                                  "addHeaderAndEdit": [Function],
                                  "addNewTableColumn": [Function],
                                  "addNewTableRow": [Function],
                                  "advanceTodoState": [Function],
                                  "applyOpennessState": [Function],
                                  "displayFile": [Function],
                                  "enterDescriptionEditMode": [Function],
                                  "enterTableEditMode": [Function],
                                  "enterTitleEditMode": [Function],
                                  "exitDescriptionEditMode": [Function],
                                  "exitTableEditMode": [Function],
                                  "exitTitleEditMode": [Function],
                                  "focusHeader": [Function],
                                  "moveHeaderDown": [Function],
                                  "moveHeaderLeft": [Function],
                                  "moveHeaderRight": [Function],
                                  "moveHeaderUp": [Function],
                                  "moveSubtreeLeft": [Function],
                                  "moveSubtreeRight": [Function],
                                  "moveTableColumnLeft": [Function],
                                  "moveTableColumnRight": [Function],
                                  "moveTableRowDown": [Function],
                                  "moveTableRowUp": [Function],
                                  "noOp": [Function],
                                  "openHeader": [Function],
                                  "removeHeader": [Function],
                                  "removeTableColumn": [Function],
                                  "removeTableRow": [Function],
                                  "selectHeader": [Function],
                                  "selectNextSiblingHeader": [Function],
                                  "selectNextVisibleHeader": [Function],
                                  "selectPreviousVisibleHeader": [Function],
                                  "setDirty": [Function],
                                  "setSelectedTableCellId": [Function],
                                  "stopDisplayingFile": [Function],
                                  "toggleHeaderOpened": [Function],
                                  "unfocusHeader": [Function],
                                  "updateHeaderDescription": [Function],
                                  "updateHeaderTitle": [Function],
                                  "updateTableCellValue": [Function],
                                }
                              }
                              selectedTableCellId={null}
                            >
                              <div />
                            </HeaderContent>
                          </Connect(HeaderContent)>
                        </div>
                      </Header>
                    </Connect(Header)>
                    <Connect(Header)
                      color="rgba(42, 164, 168, 1)"
                      hasContent={false}
                      header={
                        Immutable.Map {
                          titleLine: Immutable.Map {
                            title: Immutable.List [
                              Immutable.Map {
                                type: "text",
                                contents: "A todo item",
                              },
                            ],
                            rawTitle: "A todo item",
                            todoKeyword: "TODO",
                            tags: Immutable.List [
                            ],
                          },
                          rawDescription: "",
                          description: Immutable.List [
                          ],
                          opened: false,
                          id: 10,
                          nestingLevel: 2,
                        }
                      }
                      isSelected={false}
                      key="10"
                      onRef={[Function]}
                    >
                      <Header
                        color="rgba(42, 164, 168, 1)"
                        focusedHeader={null}
                        hasContent={false}
                        header={
                          Immutable.Map {
                            titleLine: Immutable.Map {
                              title: Immutable.List [
                                Immutable.Map {
                                  type: "text",
                                  contents: "A todo item",
                                },
                              ],
                              rawTitle: "A todo item",
                              todoKeyword: "TODO",
                              tags: Immutable.List [
                              ],
                            },
                            rawDescription: "",
                            description: Immutable.List [
                            ],
                            opened: false,
                            id: 10,
                            nestingLevel: 2,
                          }
                        }
                        isSelected={false}
                        onRef={[Function]}
                      >
                        <div
                          className="header"
                          style={
                            Object {
                              "paddingLeft": 40,
                            }
                          }
                        >
                          <div
                            style={
                              Object {
                                "color": "rgba(42, 164, 168, 1)",
                                "marginLeft": -16,
                              }
                            }
                          >
                            *
                          </div>
                          <Connect(TitleLine)
                            color="rgba(42, 164, 168, 1)"
                            hasContent={false}
                            header={
                              Immutable.Map {
                                titleLine: Immutable.Map {
                                  title: Immutable.List [
                                    Immutable.Map {
                                      type: "text",
                                      contents: "A todo item",
                                    },
                                  ],
                                  rawTitle: "A todo item",
                                  todoKeyword: "TODO",
                                  tags: Immutable.List [
                                  ],
                                },
                                rawDescription: "",
                                description: Immutable.List [
                                ],
                                opened: false,
                                id: 10,
                                nestingLevel: 2,
                              }
                            }
                            isSelected={false}
                          >
                            <TitleLine
                              color="rgba(42, 164, 168, 1)"
                              hasContent={false}
                              header={
                                Immutable.Map {
                                  titleLine: Immutable.Map {
                                    title: Immutable.List [
                                      Immutable.Map {
                                        type: "text",
                                        contents: "A todo item",
                                      },
                                    ],
                                    rawTitle: "A todo item",
                                    todoKeyword: "TODO",
                                    tags: Immutable.List [
                                    ],
                                  },
                                  rawDescription: "",
                                  description: Immutable.List [
                                  ],
                                  opened: false,
                                  id: 10,
                                  nestingLevel: 2,
                                }
                              }
                              isSelected={false}
                              org={
                                Object {
                                  "addHeader": [Function],
                                  "addHeaderAndEdit": [Function],
                                  "addNewTableColumn": [Function],
                                  "addNewTableRow": [Function],
                                  "advanceTodoState": [Function],
                                  "applyOpennessState": [Function],
                                  "displayFile": [Function],
                                  "enterDescriptionEditMode": [Function],
                                  "enterTableEditMode": [Function],
                                  "enterTitleEditMode": [Function],
                                  "exitDescriptionEditMode": [Function],
                                  "exitTableEditMode": [Function],
                                  "exitTitleEditMode": [Function],
                                  "focusHeader": [Function],
                                  "moveHeaderDown": [Function],
                                  "moveHeaderLeft": [Function],
                                  "moveHeaderRight": [Function],
                                  "moveHeaderUp": [Function],
                                  "moveSubtreeLeft": [Function],
                                  "moveSubtreeRight": [Function],
                                  "moveTableColumnLeft": [Function],
                                  "moveTableColumnRight": [Function],
                                  "moveTableRowDown": [Function],
                                  "moveTableRowUp": [Function],
                                  "noOp": [Function],
                                  "openHeader": [Function],
                                  "removeHeader": [Function],
                                  "removeTableColumn": [Function],
                                  "removeTableRow": [Function],
                                  "selectHeader": [Function],
                                  "selectNextSiblingHeader": [Function],
                                  "selectNextVisibleHeader": [Function],
                                  "selectPreviousVisibleHeader": [Function],
                                  "setDirty": [Function],
                                  "setSelectedTableCellId": [Function],
                                  "stopDisplayingFile": [Function],
                                  "toggleHeaderOpened": [Function],
                                  "unfocusHeader": [Function],
                                  "updateHeaderDescription": [Function],
                                  "updateHeaderTitle": [Function],
                                  "updateTableCellValue": [Function],
                                }
                              }
                            >
                              <div
                                className="title-line nice-scroll"
                                onClick={[Function]}
                              >
                                <span
                                  className="todo-keyword todo-keyword--todo"
                                  onClick={[Function]}
                                >
                                  TODO
                                </span>
                                <div>
                                  <span
                                    style={
                                      Object {
                                        "color": "rgba(42, 164, 168, 1)",
                                        "fontWeight": "bold",
                                      }
                                    }
                                  >
                                    <AttributedString
                                      parts={
                                        Immutable.List [
                                          Immutable.Map {
                                            type: "text",
                                            contents: "A todo item",
                                          },
                                        ]
                                      }
                                    >
                                      <span>
                                        A todo item
                                      </span>
                                    </AttributedString>
                                  </span>
                                </div>
                              </div>
                            </TitleLine>
                          </Connect(TitleLine)>
                          <Connect(HeaderContent)
                            header={
                              Immutable.Map {
                                titleLine: Immutable.Map {
                                  title: Immutable.List [
                                    Immutable.Map {
                                      type: "text",
                                      contents: "A todo item",
                                    },
                                  ],
                                  rawTitle: "A todo item",
                                  todoKeyword: "TODO",
                                  tags: Immutable.List [
                                  ],
                                },
                                rawDescription: "",
                                description: Immutable.List [
                                ],
                                opened: false,
                                id: 10,
                                nestingLevel: 2,
                              }
                            }
                          >
                            <HeaderContent
                              header={
                                Immutable.Map {
                                  titleLine: Immutable.Map {
                                    title: Immutable.List [
                                      Immutable.Map {
                                        type: "text",
                                        contents: "A todo item",
                                      },
                                    ],
                                    rawTitle: "A todo item",
                                    todoKeyword: "TODO",
                                    tags: Immutable.List [
                                    ],
                                  },
                                  rawDescription: "",
                                  description: Immutable.List [
                                  ],
                                  opened: false,
                                  id: 10,
                                  nestingLevel: 2,
                                }
                              }
                              org={
                                Object {
                                  "addHeader": [Function],
                                  "addHeaderAndEdit": [Function],
                                  "addNewTableColumn": [Function],
                                  "addNewTableRow": [Function],
                                  "advanceTodoState": [Function],
                                  "applyOpennessState": [Function],
                                  "displayFile": [Function],
                                  "enterDescriptionEditMode": [Function],
                                  "enterTableEditMode": [Function],
                                  "enterTitleEditMode": [Function],
                                  "exitDescriptionEditMode": [Function],
                                  "exitTableEditMode": [Function],
                                  "exitTitleEditMode": [Function],
                                  "focusHeader": [Function],
                                  "moveHeaderDown": [Function],
                                  "moveHeaderLeft": [Function],
                                  "moveHeaderRight": [Function],
                                  "moveHeaderUp": [Function],
                                  "moveSubtreeLeft": [Function],
                                  "moveSubtreeRight": [Function],
                                  "moveTableColumnLeft": [Function],
                                  "moveTableColumnRight": [Function],
                                  "moveTableRowDown": [Function],
                                  "moveTableRowUp": [Function],
                                  "noOp": [Function],
                                  "openHeader": [Function],
                                  "removeHeader": [Function],
                                  "removeTableColumn": [Function],
                                  "removeTableRow": [Function],
                                  "selectHeader": [Function],
                                  "selectNextSiblingHeader": [Function],
                                  "selectNextVisibleHeader": [Function],
                                  "selectPreviousVisibleHeader": [Function],
                                  "setDirty": [Function],
                                  "setSelectedTableCellId": [Function],
                                  "stopDisplayingFile": [Function],
                                  "toggleHeaderOpened": [Function],
                                  "unfocusHeader": [Function],
                                  "updateHeaderDescription": [Function],
                                  "updateHeaderTitle": [Function],
                                  "updateTableCellValue": [Function],
                                }
                              }
                              selectedTableCellId={null}
                            >
                              <div />
                            </HeaderContent>
                          </Connect(HeaderContent)>
                        </div>
                      </Header>
                    </Connect(Header)>
                    <Connect(Header)
                      color="rgba(42, 164, 168, 1)"
                      hasContent={false}
                      header={
                        Immutable.Map {
                          titleLine: Immutable.Map {
                            title: Immutable.List [
                              Immutable.Map {
                                type: "text",
                                contents: "A finished todo item",
                              },
                            ],
                            rawTitle: "A finished todo item",
                            todoKeyword: "DONE",
                            tags: Immutable.List [
                            ],
                          },
                          rawDescription: "",
                          description: Immutable.List [
                          ],
                          opened: false,
                          id: 11,
                          nestingLevel: 2,
                        }
                      }
                      isSelected={false}
                      key="11"
                      onRef={[Function]}
                    >
                      <Header
                        color="rgba(42, 164, 168, 1)"
                        focusedHeader={null}
                        hasContent={false}
                        header={
                          Immutable.Map {
                            titleLine: Immutable.Map {
                              title: Immutable.List [
                                Immutable.Map {
                                  type: "text",
                                  contents: "A finished todo item",
                                },
                              ],
                              rawTitle: "A finished todo item",
                              todoKeyword: "DONE",
                              tags: Immutable.List [
                              ],
                            },
                            rawDescription: "",
                            description: Immutable.List [
                            ],
                            opened: false,
                            id: 11,
                            nestingLevel: 2,
                          }
                        }
                        isSelected={false}
                        onRef={[Function]}
                      >
                        <div
                          className="header"
                          style={
                            Object {
                              "paddingLeft": 40,
                            }
                          }
                        >
                          <div
                            style={
                              Object {
                                "color": "rgba(42, 164, 168, 1)",
                                "marginLeft": -16,
                              }
                            }
                          >
                            *
                          </div>
                          <Connect(TitleLine)
                            color="rgba(42, 164, 168, 1)"
                            hasContent={false}
                            header={
                              Immutable.Map {
                                titleLine: Immutable.Map {
                                  title: Immutable.List [
                                    Immutable.Map {
                                      type: "text",
                                      contents: "A finished todo item",
                                    },
                                  ],
                                  rawTitle: "A finished todo item",
                                  todoKeyword: "DONE",
                                  tags: Immutable.List [
                                  ],
                                },
                                rawDescription: "",
                                description: Immutable.List [
                                ],
                                opened: false,
                                id: 11,
                                nestingLevel: 2,
                              }
                            }
                            isSelected={false}
                          >
                            <TitleLine
                              color="rgba(42, 164, 168, 1)"
                              hasContent={false}
                              header={
                                Immutable.Map {
                                  titleLine: Immutable.Map {
                                    title: Immutable.List [
                                      Immutable.Map {
                                        type: "text",
                                        contents: "A finished todo item",
                                      },
                                    ],
                                    rawTitle: "A finished todo item",
                                    todoKeyword: "DONE",
                                    tags: Immutable.List [
                                    ],
                                  },
                                  rawDescription: "",
                                  description: Immutable.List [
                                  ],
                                  opened: false,
                                  id: 11,
                                  nestingLevel: 2,
                                }
                              }
                              isSelected={false}
                              org={
                                Object {
                                  "addHeader": [Function],
                                  "addHeaderAndEdit": [Function],
                                  "addNewTableColumn": [Function],
                                  "addNewTableRow": [Function],
                                  "advanceTodoState": [Function],
                                  "applyOpennessState": [Function],
                                  "displayFile": [Function],
                                  "enterDescriptionEditMode": [Function],
                                  "enterTableEditMode": [Function],
                                  "enterTitleEditMode": [Function],
                                  "exitDescriptionEditMode": [Function],
                                  "exitTableEditMode": [Function],
                                  "exitTitleEditMode": [Function],
                                  "focusHeader": [Function],
                                  "moveHeaderDown": [Function],
                                  "moveHeaderLeft": [Function],
                                  "moveHeaderRight": [Function],
                                  "moveHeaderUp": [Function],
                                  "moveSubtreeLeft": [Function],
                                  "moveSubtreeRight": [Function],
                                  "moveTableColumnLeft": [Function],
                                  "moveTableColumnRight": [Function],
                                  "moveTableRowDown": [Function],
                                  "moveTableRowUp": [Function],
                                  "noOp": [Function],
                                  "openHeader": [Function],
                                  "removeHeader": [Function],
                                  "removeTableColumn": [Function],
                                  "removeTableRow": [Function],
                                  "selectHeader": [Function],
                                  "selectNextSiblingHeader": [Function],
                                  "selectNextVisibleHeader": [Function],
                                  "selectPreviousVisibleHeader": [Function],
                                  "setDirty": [Function],
                                  "setSelectedTableCellId": [Function],
                                  "stopDisplayingFile": [Function],
                                  "toggleHeaderOpened": [Function],
                                  "unfocusHeader": [Function],
                                  "updateHeaderDescription": [Function],
                                  "updateHeaderTitle": [Function],
                                  "updateTableCellValue": [Function],
                                }
                              }
                            >
                              <div
                                className="title-line nice-scroll"
                                onClick={[Function]}
                              >
                                <span
                                  className="todo-keyword todo-keyword--done"
                                  onClick={[Function]}
                                >
                                  DONE
                                </span>
                                <div>
                                  <span
                                    style={
                                      Object {
                                        "color": "rgba(42, 164, 168, 1)",
                                        "fontWeight": "bold",
                                      }
                                    }
                                  >
                                    <AttributedString
                                      parts={
                                        Immutable.List [
                                          Immutable.Map {
                                            type: "text",
                                            contents: "A finished todo item",
                                          },
                                        ]
                                      }
                                    >
                                      <span>
                                        A finished todo item
                                      </span>
                                    </AttributedString>
                                  </span>
                                </div>
                              </div>
                            </TitleLine>
                          </Connect(TitleLine)>
                          <Connect(HeaderContent)
                            header={
                              Immutable.Map {
                                titleLine: Immutable.Map {
                                  title: Immutable.List [
                                    Immutable.Map {
                                      type: "text",
                                      contents: "A finished todo item",
                                    },
                                  ],
                                  rawTitle: "A finished todo item",
                                  todoKeyword: "DONE",
                                  tags: Immutable.List [
                                  ],
                                },
                                rawDescription: "",
                                description: Immutable.List [
                                ],
                                opened: false,
                                id: 11,
                                nestingLevel: 2,
                              }
                            }
                          >
                            <HeaderContent
                              header={
                                Immutable.Map {
                                  titleLine: Immutable.Map {
                                    title: Immutable.List [
                                      Immutable.Map {
                                        type: "text",
                                        contents: "A finished todo item",
                                      },
                                    ],
                                    rawTitle: "A finished todo item",
                                    todoKeyword: "DONE",
                                    tags: Immutable.List [
                                    ],
                                  },
                                  rawDescription: "",
                                  description: Immutable.List [
                                  ],
                                  opened: false,
                                  id: 11,
                                  nestingLevel: 2,
                                }
                              }
                              org={
                                Object {
                                  "addHeader": [Function],
                                  "addHeaderAndEdit": [Function],
                                  "addNewTableColumn": [Function],
                                  "addNewTableRow": [Function],
                                  "advanceTodoState": [Function],
                                  "applyOpennessState": [Function],
                                  "displayFile": [Function],
                                  "enterDescriptionEditMode": [Function],
                                  "enterTableEditMode": [Function],
                                  "enterTitleEditMode": [Function],
                                  "exitDescriptionEditMode": [Function],
                                  "exitTableEditMode": [Function],
                                  "exitTitleEditMode": [Function],
                                  "focusHeader": [Function],
                                  "moveHeaderDown": [Function],
                                  "moveHeaderLeft": [Function],
                                  "moveHeaderRight": [Function],
                                  "moveHeaderUp": [Function],
                                  "moveSubtreeLeft": [Function],
                                  "moveSubtreeRight": [Function],
                                  "moveTableColumnLeft": [Function],
                                  "moveTableColumnRight": [Function],
                                  "moveTableRowDown": [Function],
                                  "moveTableRowUp": [Function],
                                  "noOp": [Function],
                                  "openHeader": [Function],
                                  "removeHeader": [Function],
                                  "removeTableColumn": [Function],
                                  "removeTableRow": [Function],
                                  "selectHeader": [Function],
                                  "selectNextSiblingHeader": [Function],
                                  "selectNextVisibleHeader": [Function],
                                  "selectPreviousVisibleHeader": [Function],
                                  "setDirty": [Function],
                                  "setSelectedTableCellId": [Function],
                                  "stopDisplayingFile": [Function],
                                  "toggleHeaderOpened": [Function],
                                  "unfocusHeader": [Function],
                                  "updateHeaderDescription": [Function],
                                  "updateHeaderTitle": [Function],
                                  "updateTableCellValue": [Function],
                                }
                              }
                              selectedTableCellId={null}
                            >
                              <div />
                            </HeaderContent>
                          </Connect(HeaderContent)>
                        </div>
                      </Header>
                    </Connect(Header)>
                    <Connect(Header)
                      color="rgba(38, 143, 214, 1)"
                      hasContent={true}
                      header={
                        Immutable.Map {
                          titleLine: Immutable.Map {
                            title: Immutable.List [
                              Immutable.Map {
                                type: "text",
                                contents: "Another top level header",
                              },
                            ],
                            rawTitle: "Another top level header",
                            todoKeyword: undefined,
                            tags: Immutable.List [
                            ],
                          },
                          rawDescription: "Some description content",
                          description: Immutable.List [
                            Immutable.Map {
                              type: "text",
                              contents: "Some description content",
                            },
                          ],
                          opened: false,
                          id: 12,
                          nestingLevel: 1,
                        }
                      }
                      isSelected={false}
                      key="12"
                      onRef={[Function]}
                    >
                      <Header
                        color="rgba(38, 143, 214, 1)"
                        focusedHeader={null}
                        hasContent={true}
                        header={
                          Immutable.Map {
                            titleLine: Immutable.Map {
                              title: Immutable.List [
                                Immutable.Map {
                                  type: "text",
                                  contents: "Another top level header",
                                },
                              ],
                              rawTitle: "Another top level header",
                              todoKeyword: undefined,
                              tags: Immutable.List [
                              ],
                            },
                            rawDescription: "Some description content",
                            description: Immutable.List [
                              Immutable.Map {
                                type: "text",
                                contents: "Some description content",
                              },
                            ],
                            opened: false,
                            id: 12,
                            nestingLevel: 1,
                          }
                        }
                        isSelected={false}
                        onRef={[Function]}
                      >
                        <div
                          className="header"
                          style={
                            Object {
                              "paddingLeft": 20,
                            }
                          }
                        >
                          <div
                            style={
                              Object {
                                "color": "rgba(38, 143, 214, 1)",
                                "marginLeft": -16,
                              }
                            }
                          >
                            *
                          </div>
                          <Connect(TitleLine)
                            color="rgba(38, 143, 214, 1)"
                            hasContent={true}
                            header={
                              Immutable.Map {
                                titleLine: Immutable.Map {
                                  title: Immutable.List [
                                    Immutable.Map {
                                      type: "text",
                                      contents: "Another top level header",
                                    },
                                  ],
                                  rawTitle: "Another top level header",
                                  todoKeyword: undefined,
                                  tags: Immutable.List [
                                  ],
                                },
                                rawDescription: "Some description content",
                                description: Immutable.List [
                                  Immutable.Map {
                                    type: "text",
                                    contents: "Some description content",
                                  },
                                ],
                                opened: false,
                                id: 12,
                                nestingLevel: 1,
                              }
                            }
                            isSelected={false}
                          >
                            <TitleLine
                              color="rgba(38, 143, 214, 1)"
                              hasContent={true}
                              header={
                                Immutable.Map {
                                  titleLine: Immutable.Map {
                                    title: Immutable.List [
                                      Immutable.Map {
                                        type: "text",
                                        contents: "Another top level header",
                                      },
                                    ],
                                    rawTitle: "Another top level header",
                                    todoKeyword: undefined,
                                    tags: Immutable.List [
                                    ],
                                  },
                                  rawDescription: "Some description content",
                                  description: Immutable.List [
                                    Immutable.Map {
                                      type: "text",
                                      contents: "Some description content",
                                    },
                                  ],
                                  opened: false,
                                  id: 12,
                                  nestingLevel: 1,
                                }
                              }
                              isSelected={false}
                              org={
                                Object {
                                  "addHeader": [Function],
                                  "addHeaderAndEdit": [Function],
                                  "addNewTableColumn": [Function],
                                  "addNewTableRow": [Function],
                                  "advanceTodoState": [Function],
                                  "applyOpennessState": [Function],
                                  "displayFile": [Function],
                                  "enterDescriptionEditMode": [Function],
                                  "enterTableEditMode": [Function],
                                  "enterTitleEditMode": [Function],
                                  "exitDescriptionEditMode": [Function],
                                  "exitTableEditMode": [Function],
                                  "exitTitleEditMode": [Function],
                                  "focusHeader": [Function],
                                  "moveHeaderDown": [Function],
                                  "moveHeaderLeft": [Function],
                                  "moveHeaderRight": [Function],
                                  "moveHeaderUp": [Function],
                                  "moveSubtreeLeft": [Function],
                                  "moveSubtreeRight": [Function],
                                  "moveTableColumnLeft": [Function],
                                  "moveTableColumnRight": [Function],
                                  "moveTableRowDown": [Function],
                                  "moveTableRowUp": [Function],
                                  "noOp": [Function],
                                  "openHeader": [Function],
                                  "removeHeader": [Function],
                                  "removeTableColumn": [Function],
                                  "removeTableRow": [Function],
                                  "selectHeader": [Function],
                                  "selectNextSiblingHeader": [Function],
                                  "selectNextVisibleHeader": [Function],
                                  "selectPreviousVisibleHeader": [Function],
                                  "setDirty": [Function],
                                  "setSelectedTableCellId": [Function],
                                  "stopDisplayingFile": [Function],
                                  "toggleHeaderOpened": [Function],
                                  "unfocusHeader": [Function],
                                  "updateHeaderDescription": [Function],
                                  "updateHeaderTitle": [Function],
                                  "updateTableCellValue": [Function],
                                }
                              }
                            >
                              <div
                                className="title-line nice-scroll"
                                onClick={[Function]}
                              >
                                <div>
                                  <span
                                    style={
                                      Object {
                                        "color": "rgba(38, 143, 214, 1)",
                                        "fontWeight": "bold",
                                      }
                                    }
                                  >
                                    <AttributedString
                                      parts={
                                        Immutable.List [
                                          Immutable.Map {
                                            type: "text",
                                            contents: "Another top level header",
                                          },
                                        ]
                                      }
                                    >
                                      <span>
                                        Another top level header
                                      </span>
                                    </AttributedString>
                                    ...
                                  </span>
                                </div>
                              </div>
                            </TitleLine>
                          </Connect(TitleLine)>
                          <Connect(HeaderContent)
                            header={
                              Immutable.Map {
                                titleLine: Immutable.Map {
                                  title: Immutable.List [
                                    Immutable.Map {
                                      type: "text",
                                      contents: "Another top level header",
                                    },
                                  ],
                                  rawTitle: "Another top level header",
                                  todoKeyword: undefined,
                                  tags: Immutable.List [
                                  ],
                                },
                                rawDescription: "Some description content",
                                description: Immutable.List [
                                  Immutable.Map {
                                    type: "text",
                                    contents: "Some description content",
                                  },
                                ],
                                opened: false,
                                id: 12,
                                nestingLevel: 1,
                              }
                            }
                          >
                            <HeaderContent
                              header={
                                Immutable.Map {
                                  titleLine: Immutable.Map {
                                    title: Immutable.List [
                                      Immutable.Map {
                                        type: "text",
                                        contents: "Another top level header",
                                      },
                                    ],
                                    rawTitle: "Another top level header",
                                    todoKeyword: undefined,
                                    tags: Immutable.List [
                                    ],
                                  },
                                  rawDescription: "Some description content",
                                  description: Immutable.List [
                                    Immutable.Map {
                                      type: "text",
                                      contents: "Some description content",
                                    },
                                  ],
                                  opened: false,
                                  id: 12,
                                  nestingLevel: 1,
                                }
                              }
                              org={
                                Object {
                                  "addHeader": [Function],
                                  "addHeaderAndEdit": [Function],
                                  "addNewTableColumn": [Function],
                                  "addNewTableRow": [Function],
                                  "advanceTodoState": [Function],
                                  "applyOpennessState": [Function],
                                  "displayFile": [Function],
                                  "enterDescriptionEditMode": [Function],
                                  "enterTableEditMode": [Function],
                                  "enterTitleEditMode": [Function],
                                  "exitDescriptionEditMode": [Function],
                                  "exitTableEditMode": [Function],
                                  "exitTitleEditMode": [Function],
                                  "focusHeader": [Function],
                                  "moveHeaderDown": [Function],
                                  "moveHeaderLeft": [Function],
                                  "moveHeaderRight": [Function],
                                  "moveHeaderUp": [Function],
                                  "moveSubtreeLeft": [Function],
                                  "moveSubtreeRight": [Function],
                                  "moveTableColumnLeft": [Function],
                                  "moveTableColumnRight": [Function],
                                  "moveTableRowDown": [Function],
                                  "moveTableRowUp": [Function],
                                  "noOp": [Function],
                                  "openHeader": [Function],
                                  "removeHeader": [Function],
                                  "removeTableColumn": [Function],
                                  "removeTableRow": [Function],
                                  "selectHeader": [Function],
                                  "selectNextSiblingHeader": [Function],
                                  "selectNextVisibleHeader": [Function],
                                  "selectPreviousVisibleHeader": [Function],
                                  "setDirty": [Function],
                                  "setSelectedTableCellId": [Function],
                                  "stopDisplayingFile": [Function],
                                  "toggleHeaderOpened": [Function],
                                  "unfocusHeader": [Function],
                                  "updateHeaderDescription": [Function],
                                  "updateHeaderTitle": [Function],
                                  "updateTableCellValue": [Function],
                                }
                              }
                              selectedTableCellId={null}
                            >
                              <div />
                            </HeaderContent>
                          </Connect(HeaderContent)>
                        </div>
                      </Header>
                    </Connect(Header)>
                    <Connect(Header)
                      color="rgba(38, 143, 214, 1)"
                      hasContent={false}
                      header={
                        Immutable.Map {
                          titleLine: Immutable.Map {
                            title: Immutable.List [
                              Immutable.Map {
                                type: "text",
                                contents: "A header with tags                                              ",
                              },
                            ],
                            rawTitle: "A header with tags                                              ",
                            todoKeyword: undefined,
                            tags: Immutable.List [
                              "tag1",
                              "tag2",
                            ],
                          },
                          rawDescription: "",
                          description: Immutable.List [
                          ],
                          opened: false,
                          id: 13,
                          nestingLevel: 1,
                        }
                      }
                      isSelected={false}
                      key="13"
                      onRef={[Function]}
                    >
                      <Header
                        color="rgba(38, 143, 214, 1)"
                        focusedHeader={null}
                        hasContent={false}
                        header={
                          Immutable.Map {
                            titleLine: Immutable.Map {
                              title: Immutable.List [
                                Immutable.Map {
                                  type: "text",
                                  contents: "A header with tags                                              ",
                                },
                              ],
                              rawTitle: "A header with tags                                              ",
                              todoKeyword: undefined,
                              tags: Immutable.List [
                                "tag1",
                                "tag2",
                              ],
                            },
                            rawDescription: "",
                            description: Immutable.List [
                            ],
                            opened: false,
                            id: 13,
                            nestingLevel: 1,
                          }
                        }
                        isSelected={false}
                        onRef={[Function]}
                      >
                        <div
                          className="header"
                          style={
                            Object {
                              "paddingLeft": 20,
                            }
                          }
                        >
                          <div
                            style={
                              Object {
                                "color": "rgba(38, 143, 214, 1)",
                                "marginLeft": -16,
                              }
                            }
                          >
                            *
                          </div>
                          <Connect(TitleLine)
                            color="rgba(38, 143, 214, 1)"
                            hasContent={false}
                            header={
                              Immutable.Map {
                                titleLine: Immutable.Map {
                                  title: Immutable.List [
                                    Immutable.Map {
                                      type: "text",
                                      contents: "A header with tags                                              ",
                                    },
                                  ],
                                  rawTitle: "A header with tags                                              ",
                                  todoKeyword: undefined,
                                  tags: Immutable.List [
                                    "tag1",
                                    "tag2",
                                  ],
                                },
                                rawDescription: "",
                                description: Immutable.List [
                                ],
                                opened: false,
                                id: 13,
                                nestingLevel: 1,
                              }
                            }
                            isSelected={false}
                          >
                            <TitleLine
                              color="rgba(38, 143, 214, 1)"
                              hasContent={false}
                              header={
                                Immutable.Map {
                                  titleLine: Immutable.Map {
                                    title: Immutable.List [
                                      Immutable.Map {
                                        type: "text",
                                        contents: "A header with tags                                              ",
                                      },
                                    ],
                                    rawTitle: "A header with tags                                              ",
                                    todoKeyword: undefined,
                                    tags: Immutable.List [
                                      "tag1",
                                      "tag2",
                                    ],
                                  },
                                  rawDescription: "",
                                  description: Immutable.List [
                                  ],
                                  opened: false,
                                  id: 13,
                                  nestingLevel: 1,
                                }
                              }
                              isSelected={false}
                              org={
                                Object {
                                  "addHeader": [Function],
                                  "addHeaderAndEdit": [Function],
                                  "addNewTableColumn": [Function],
                                  "addNewTableRow": [Function],
                                  "advanceTodoState": [Function],
                                  "applyOpennessState": [Function],
                                  "displayFile": [Function],
                                  "enterDescriptionEditMode": [Function],
                                  "enterTableEditMode": [Function],
                                  "enterTitleEditMode": [Function],
                                  "exitDescriptionEditMode": [Function],
                                  "exitTableEditMode": [Function],
                                  "exitTitleEditMode": [Function],
                                  "focusHeader": [Function],
                                  "moveHeaderDown": [Function],
                                  "moveHeaderLeft": [Function],
                                  "moveHeaderRight": [Function],
                                  "moveHeaderUp": [Function],
                                  "moveSubtreeLeft": [Function],
                                  "moveSubtreeRight": [Function],
                                  "moveTableColumnLeft": [Function],
                                  "moveTableColumnRight": [Function],
                                  "moveTableRowDown": [Function],
                                  "moveTableRowUp": [Function],
                                  "noOp": [Function],
                                  "openHeader": [Function],
                                  "removeHeader": [Function],
                                  "removeTableColumn": [Function],
                                  "removeTableRow": [Function],
                                  "selectHeader": [Function],
                                  "selectNextSiblingHeader": [Function],
                                  "selectNextVisibleHeader": [Function],
                                  "selectPreviousVisibleHeader": [Function],
                                  "setDirty": [Function],
                                  "setSelectedTableCellId": [Function],
                                  "stopDisplayingFile": [Function],
                                  "toggleHeaderOpened": [Function],
                                  "unfocusHeader": [Function],
                                  "updateHeaderDescription": [Function],
                                  "updateHeaderTitle": [Function],
                                  "updateTableCellValue": [Function],
                                }
                              }
                            >
                              <div
                                className="title-line nice-scroll"
                                onClick={[Function]}
                              >
                                <div>
                                  <span
                                    style={
                                      Object {
                                        "color": "rgba(38, 143, 214, 1)",
                                        "fontWeight": "bold",
                                      }
                                    }
                                  >
                                    <AttributedString
                                      parts={
                                        Immutable.List [
                                          Immutable.Map {
                                            type: "text",
                                            contents: "A header with tags                                              ",
                                          },
                                        ]
                                      }
                                    >
                                      <span>
                                        A header with tags
                                      </span>
                                    </AttributedString>
                                  </span>
                                  <div>
                                    <div
                                      className="header-tag"
                                      key="tag1"
                                    >
                                      tag1
                                    </div>
                                    <div
                                      className="header-tag"
                                      key="tag2"
                                    >
                                      tag2
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </TitleLine>
                          </Connect(TitleLine)>
                          <Connect(HeaderContent)
                            header={
                              Immutable.Map {
                                titleLine: Immutable.Map {
                                  title: Immutable.List [
                                    Immutable.Map {
                                      type: "text",
                                      contents: "A header with tags                                              ",
                                    },
                                  ],
                                  rawTitle: "A header with tags                                              ",
                                  todoKeyword: undefined,
                                  tags: Immutable.List [
                                    "tag1",
                                    "tag2",
                                  ],
                                },
                                rawDescription: "",
                                description: Immutable.List [
                                ],
                                opened: false,
                                id: 13,
                                nestingLevel: 1,
                              }
                            }
                          >
                            <HeaderContent
                              header={
                                Immutable.Map {
                                  titleLine: Immutable.Map {
                                    title: Immutable.List [
                                      Immutable.Map {
                                        type: "text",
                                        contents: "A header with tags                                              ",
                                      },
                                    ],
                                    rawTitle: "A header with tags                                              ",
                                    todoKeyword: undefined,
                                    tags: Immutable.List [
                                      "tag1",
                                      "tag2",
                                    ],
                                  },
                                  rawDescription: "",
                                  description: Immutable.List [
                                  ],
                                  opened: false,
                                  id: 13,
                                  nestingLevel: 1,
                                }
                              }
                              org={
                                Object {
                                  "addHeader": [Function],
                                  "addHeaderAndEdit": [Function],
                                  "addNewTableColumn": [Function],
                                  "addNewTableRow": [Function],
                                  "advanceTodoState": [Function],
                                  "applyOpennessState": [Function],
                                  "displayFile": [Function],
                                  "enterDescriptionEditMode": [Function],
                                  "enterTableEditMode": [Function],
                                  "enterTitleEditMode": [Function],
                                  "exitDescriptionEditMode": [Function],
                                  "exitTableEditMode": [Function],
                                  "exitTitleEditMode": [Function],
                                  "focusHeader": [Function],
                                  "moveHeaderDown": [Function],
                                  "moveHeaderLeft": [Function],
                                  "moveHeaderRight": [Function],
                                  "moveHeaderUp": [Function],
                                  "moveSubtreeLeft": [Function],
                                  "moveSubtreeRight": [Function],
                                  "moveTableColumnLeft": [Function],
                                  "moveTableColumnRight": [Function],
                                  "moveTableRowDown": [Function],
                                  "moveTableRowUp": [Function],
                                  "noOp": [Function],
                                  "openHeader": [Function],
                                  "removeHeader": [Function],
                                  "removeTableColumn": [Function],
                                  "removeTableRow": [Function],
                                  "selectHeader": [Function],
                                  "selectNextSiblingHeader": [Function],
                                  "selectNextVisibleHeader": [Function],
                                  "selectPreviousVisibleHeader": [Function],
                                  "setDirty": [Function],
                                  "setSelectedTableCellId": [Function],
                                  "stopDisplayingFile": [Function],
                                  "toggleHeaderOpened": [Function],
                                  "unfocusHeader": [Function],
                                  "updateHeaderDescription": [Function],
                                  "updateHeaderTitle": [Function],
                                  "updateTableCellValue": [Function],
                                }
                              }
                              selectedTableCellId={null}
                            >
                              <div />
                            </HeaderContent>
                          </Connect(HeaderContent)>
                        </div>
                      </Header>
                    </Connect(Header)>
                    <Connect(Header)
                      color="rgba(38, 143, 214, 1)"
                      hasContent={false}
                      header={
                        Immutable.Map {
                          titleLine: Immutable.Map {
                            title: Immutable.List [
                              Immutable.Map {
                                type: "text",
                                contents: "A header with ",
                              },
                              Immutable.Map {
                                type: "link",
                                contents: Immutable.Map {
                                  uri: "https://google.com",
                                  title: "a link",
                                },
                              },
                            ],
                            rawTitle: "A header with [[https://google.com][a link]]",
                            todoKeyword: undefined,
                            tags: Immutable.List [
                            ],
                          },
                          rawDescription: "",
                          description: Immutable.List [
                          ],
                          opened: false,
                          id: 14,
                          nestingLevel: 1,
                        }
                      }
                      isSelected={false}
                      key="14"
                      onRef={[Function]}
                    >
                      <Header
                        color="rgba(38, 143, 214, 1)"
                        focusedHeader={null}
                        hasContent={false}
                        header={
                          Immutable.Map {
                            titleLine: Immutable.Map {
                              title: Immutable.List [
                                Immutable.Map {
                                  type: "text",
                                  contents: "A header with ",
                                },
                                Immutable.Map {
                                  type: "link",
                                  contents: Immutable.Map {
                                    uri: "https://google.com",
                                    title: "a link",
                                  },
                                },
                              ],
                              rawTitle: "A header with [[https://google.com][a link]]",
                              todoKeyword: undefined,
                              tags: Immutable.List [
                              ],
                            },
                            rawDescription: "",
                            description: Immutable.List [
                            ],
                            opened: false,
                            id: 14,
                            nestingLevel: 1,
                          }
                        }
                        isSelected={false}
                        onRef={[Function]}
                      >
                        <div
                          className="header"
                          style={
                            Object {
                              "paddingLeft": 20,
                            }
                          }
                        >
                          <div
                            style={
                              Object {
                                "color": "rgba(38, 143, 214, 1)",
                                "marginLeft": -16,
                              }
                            }
                          >
                            *
                          </div>
                          <Connect(TitleLine)
                            color="rgba(38, 143, 214, 1)"
                            hasContent={false}
                            header={
                              Immutable.Map {
                                titleLine: Immutable.Map {
                                  title: Immutable.List [
                                    Immutable.Map {
                                      type: "text",
                                      contents: "A header with ",
                                    },
                                    Immutable.Map {
                                      type: "link",
                                      contents: Immutable.Map {
                                        uri: "https://google.com",
                                        title: "a link",
                                      },
                                    },
                                  ],
                                  rawTitle: "A header with [[https://google.com][a link]]",
                                  todoKeyword: undefined,
                                  tags: Immutable.List [
                                  ],
                                },
                                rawDescription: "",
                                description: Immutable.List [
                                ],
                                opened: false,
                                id: 14,
                                nestingLevel: 1,
                              }
                            }
                            isSelected={false}
                          >
                            <TitleLine
                              color="rgba(38, 143, 214, 1)"
                              hasContent={false}
                              header={
                                Immutable.Map {
                                  titleLine: Immutable.Map {
                                    title: Immutable.List [
                                      Immutable.Map {
                                        type: "text",
                                        contents: "A header with ",
                                      },
                                      Immutable.Map {
                                        type: "link",
                                        contents: Immutable.Map {
                                          uri: "https://google.com",
                                          title: "a link",
                                        },
                                      },
                                    ],
                                    rawTitle: "A header with [[https://google.com][a link]]",
                                    todoKeyword: undefined,
                                    tags: Immutable.List [
                                    ],
                                  },
                                  rawDescription: "",
                                  description: Immutable.List [
                                  ],
                                  opened: false,
                                  id: 14,
                                  nestingLevel: 1,
                                }
                              }
                              isSelected={false}
                              org={
                                Object {
                                  "addHeader": [Function],
                                  "addHeaderAndEdit": [Function],
                                  "addNewTableColumn": [Function],
                                  "addNewTableRow": [Function],
                                  "advanceTodoState": [Function],
                                  "applyOpennessState": [Function],
                                  "displayFile": [Function],
                                  "enterDescriptionEditMode": [Function],
                                  "enterTableEditMode": [Function],
                                  "enterTitleEditMode": [Function],
                                  "exitDescriptionEditMode": [Function],
                                  "exitTableEditMode": [Function],
                                  "exitTitleEditMode": [Function],
                                  "focusHeader": [Function],
                                  "moveHeaderDown": [Function],
                                  "moveHeaderLeft": [Function],
                                  "moveHeaderRight": [Function],
                                  "moveHeaderUp": [Function],
                                  "moveSubtreeLeft": [Function],
                                  "moveSubtreeRight": [Function],
                                  "moveTableColumnLeft": [Function],
                                  "moveTableColumnRight": [Function],
                                  "moveTableRowDown": [Function],
                                  "moveTableRowUp": [Function],
                                  "noOp": [Function],
                                  "openHeader": [Function],
                                  "removeHeader": [Function],
                                  "removeTableColumn": [Function],
                                  "removeTableRow": [Function],
                                  "selectHeader": [Function],
                                  "selectNextSiblingHeader": [Function],
                                  "selectNextVisibleHeader": [Function],
                                  "selectPreviousVisibleHeader": [Function],
                                  "setDirty": [Function],
                                  "setSelectedTableCellId": [Function],
                                  "stopDisplayingFile": [Function],
                                  "toggleHeaderOpened": [Function],
                                  "unfocusHeader": [Function],
                                  "updateHeaderDescription": [Function],
                                  "updateHeaderTitle": [Function],
                                  "updateTableCellValue": [Function],
                                }
                              }
                            >
                              <div
                                className="title-line nice-scroll"
                                onClick={[Function]}
                              >
                                <div>
                                  <span
                                    style={
                                      Object {
                                        "color": "rgba(38, 143, 214, 1)",
                                        "fontWeight": "bold",
                                      }
                                    }
                                  >
                                    <AttributedString
                                      parts={
                                        Immutable.List [
                                          Immutable.Map {
                                            type: "text",
                                            contents: "A header with ",
                                          },
                                          Immutable.Map {
                                            type: "link",
                                            contents: Immutable.Map {
                                              uri: "https://google.com",
                                              title: "a link",
                                            },
                                          },
                                        ]
                                      }
                                    >
                                      <span>
                                        A header with
                                        <a
                                          href="https://google.com"
                                          key="15"
                                        >
                                          a link
                                        </a>
                                      </span>
                                    </AttributedString>
                                  </span>
                                </div>
                              </div>
                            </TitleLine>
                          </Connect(TitleLine)>
                          <Connect(HeaderContent)
                            header={
                              Immutable.Map {
                                titleLine: Immutable.Map {
                                  title: Immutable.List [
                                    Immutable.Map {
                                      type: "text",
                                      contents: "A header with ",
                                    },
                                    Immutable.Map {
                                      type: "link",
                                      contents: Immutable.Map {
                                        uri: "https://google.com",
                                        title: "a link",
                                      },
                                    },
                                  ],
                                  rawTitle: "A header with [[https://google.com][a link]]",
                                  todoKeyword: undefined,
                                  tags: Immutable.List [
                                  ],
                                },
                                rawDescription: "",
                                description: Immutable.List [
                                ],
                                opened: false,
                                id: 14,
                                nestingLevel: 1,
                              }
                            }
                          >
                            <HeaderContent
                              header={
                                Immutable.Map {
                                  titleLine: Immutable.Map {
                                    title: Immutable.List [
                                      Immutable.Map {
                                        type: "text",
                                        contents: "A header with ",
                                      },
                                      Immutable.Map {
                                        type: "link",
                                        contents: Immutable.Map {
                                          uri: "https://google.com",
                                          title: "a link",
                                        },
                                      },
                                    ],
                                    rawTitle: "A header with [[https://google.com][a link]]",
                                    todoKeyword: undefined,
                                    tags: Immutable.List [
                                    ],
                                  },
                                  rawDescription: "",
                                  description: Immutable.List [
                                  ],
                                  opened: false,
                                  id: 14,
                                  nestingLevel: 1,
                                }
                              }
                              org={
                                Object {
                                  "addHeader": [Function],
                                  "addHeaderAndEdit": [Function],
                                  "addNewTableColumn": [Function],
                                  "addNewTableRow": [Function],
                                  "advanceTodoState": [Function],
                                  "applyOpennessState": [Function],
                                  "displayFile": [Function],
                                  "enterDescriptionEditMode": [Function],
                                  "enterTableEditMode": [Function],
                                  "enterTitleEditMode": [Function],
                                  "exitDescriptionEditMode": [Function],
                                  "exitTableEditMode": [Function],
                                  "exitTitleEditMode": [Function],
                                  "focusHeader": [Function],
                                  "moveHeaderDown": [Function],
                                  "moveHeaderLeft": [Function],
                                  "moveHeaderRight": [Function],
                                  "moveHeaderUp": [Function],
                                  "moveSubtreeLeft": [Function],
                                  "moveSubtreeRight": [Function],
                                  "moveTableColumnLeft": [Function],
                                  "moveTableColumnRight": [Function],
                                  "moveTableRowDown": [Function],
                                  "moveTableRowUp": [Function],
                                  "noOp": [Function],
                                  "openHeader": [Function],
                                  "removeHeader": [Function],
                                  "removeTableColumn": [Function],
                                  "removeTableRow": [Function],
                                  "selectHeader": [Function],
                                  "selectNextSiblingHeader": [Function],
                                  "selectNextVisibleHeader": [Function],
                                  "selectPreviousVisibleHeader": [Function],
                                  "setDirty": [Function],
                                  "setSelectedTableCellId": [Function],
                                  "stopDisplayingFile": [Function],
                                  "toggleHeaderOpened": [Function],
                                  "unfocusHeader": [Function],
                                  "updateHeaderDescription": [Function],
                                  "updateHeaderTitle": [Function],
                                  "updateTableCellValue": [Function],
                                }
                              }
                              selectedTableCellId={null}
                            >
                              <div />
                            </HeaderContent>
                          </Connect(HeaderContent)>
                        </div>
                      </Header>
                    </Connect(Header)>
                  </div>
                </HeaderList>
              </Connect(HeaderList)>
              <Connect(ActionDrawer)>
                <ActionDrawer
                  captureTemplates={
                    Immutable.List [
                    ]
                  }
                  dropbox={
                    Object {
                      "authenticate": [Function],
                      "downloadFile": [Function],
                      "getDirectoryListing": [Function],
                      "pushBackup": [Function],
                      "pushCurrentFile": [Function],
                      "redownloadCurrentFile": [Function],
                      "setCurrentFileBrowserDirectoryListing": [Function],
                      "signOut": [Function],
                    }
                  }
                  historyCount={0}
                  isFocusedHeaderActive={false}
                  org={
                    Object {
                      "addHeader": [Function],
                      "addHeaderAndEdit": [Function],
                      "addNewTableColumn": [Function],
                      "addNewTableRow": [Function],
                      "advanceTodoState": [Function],
                      "applyOpennessState": [Function],
                      "displayFile": [Function],
                      "enterDescriptionEditMode": [Function],
                      "enterTableEditMode": [Function],
                      "enterTitleEditMode": [Function],
                      "exitDescriptionEditMode": [Function],
                      "exitTableEditMode": [Function],
                      "exitTitleEditMode": [Function],
                      "focusHeader": [Function],
                      "moveHeaderDown": [Function],
                      "moveHeaderLeft": [Function],
                      "moveHeaderRight": [Function],
                      "moveHeaderUp": [Function],
                      "moveSubtreeLeft": [Function],
                      "moveSubtreeRight": [Function],
                      "moveTableColumnLeft": [Function],
                      "moveTableColumnRight": [Function],
                      "moveTableRowDown": [Function],
                      "moveTableRowUp": [Function],
                      "noOp": [Function],
                      "openHeader": [Function],
                      "removeHeader": [Function],
                      "removeTableColumn": [Function],
                      "removeTableRow": [Function],
                      "selectHeader": [Function],
                      "selectNextSiblingHeader": [Function],
                      "selectNextVisibleHeader": [Function],
                      "selectPreviousVisibleHeader": [Function],
                      "setDirty": [Function],
                      "setSelectedTableCellId": [Function],
                      "stopDisplayingFile": [Function],
                      "toggleHeaderOpened": [Function],
                      "unfocusHeader": [Function],
                      "updateHeaderDescription": [Function],
                      "updateHeaderTitle": [Function],
                      "updateTableCellValue": [Function],
                    }
                  }
                  path="/some/test/file"
                  selectedHeaderId={8}
                  selectedTableCellId={null}
                  undo={
                    Object {
                      "clearHistory": [Function],
                      "jump": [Function],
                      "jumpToFuture": [Function],
                      "jumpToPast": [Function],
                      "redo": [Function],
                      "undo": [Function],
                    }
                  }
                >
                  <div
                    className="action-drawer-container nice-scroll"
                  >
                    <ActionButton
                      iconName="check"
                      isDisabled={false}
                      onClick={[Function]}
                    >
                      <button
                        className="btn btn--circle action-drawer__btn fas fa-lg fa-check"
                        onClick={[Function]}
                      />
                    </ActionButton>
                    <ActionButton
                      iconName="pencil-alt"
                      isDisabled={false}
                      onClick={[Function]}
                    >
                      <button
                        className="btn btn--circle action-drawer__btn fas fa-lg fa-pencil-alt"
                        onClick={[Function]}
                      />
                    </ActionButton>
                    <ActionButton
                      iconName="edit"
                      isDisabled={false}
                      onClick={[Function]}
                    >
                      <button
                        className="btn btn--circle action-drawer__btn fas fa-lg fa-edit"
                        onClick={[Function]}
                      />
                    </ActionButton>
                    <ActionButton
                      iconName="plus"
                      isDisabled={false}
                      onClick={[Function]}
                    >
                      <button
                        className="btn btn--circle action-drawer__btn fas fa-lg fa-plus"
                        onClick={[Function]}
                      />
                    </ActionButton>
                    <ActionButton
                      iconName="times"
                      isDisabled={false}
                      onClick={[Function]}
                    >
                      <button
                        className="btn btn--circle action-drawer__btn fas fa-lg fa-times"
                        onClick={[Function]}
                      />
                    </ActionButton>
                    <ActionButton
                      iconName="arrow-up"
                      isDisabled={false}
                      onClick={[Function]}
                    >
                      <button
                        className="btn btn--circle action-drawer__btn fas fa-lg fa-arrow-up"
                        onClick={[Function]}
                      />
                    </ActionButton>
                    <ActionButton
                      iconName="arrow-down"
                      isDisabled={false}
                      onClick={[Function]}
                    >
                      <button
                        className="btn btn--circle action-drawer__btn fas fa-lg fa-arrow-down"
                        onClick={[Function]}
                      />
                    </ActionButton>
                    <ActionButton
                      iconName="arrow-left"
                      isDisabled={false}
                      onClick={[Function]}
                    >
                      <button
                        className="btn btn--circle action-drawer__btn fas fa-lg fa-arrow-left"
                        onClick={[Function]}
                      />
                    </ActionButton>
                    <ActionButton
                      iconName="arrow-right"
                      isDisabled={false}
                      onClick={[Function]}
                    >
                      <button
                        className="btn btn--circle action-drawer__btn fas fa-lg fa-arrow-right"
                        onClick={[Function]}
                      />
                    </ActionButton>
                    <ActionButton
                      iconName="chevron-left"
                      isDisabled={false}
                      onClick={[Function]}
                    >
                      <button
                        className="btn btn--circle action-drawer__btn fas fa-lg fa-chevron-left"
                        onClick={[Function]}
                      />
                    </ActionButton>
                    <ActionButton
                      iconName="chevron-right"
                      isDisabled={false}
                      onClick={[Function]}
                    >
                      <button
                        className="btn btn--circle action-drawer__btn fas fa-lg fa-chevron-right"
                        onClick={[Function]}
                      />
                    </ActionButton>
                    <ActionButton
                      iconName="compress"
                      isDisabled={false}
                      onClick={[Function]}
                    >
                      <button
                        className="btn btn--circle action-drawer__btn fas fa-lg fa-compress"
                        onClick={[Function]}
                      />
                    </ActionButton>
                    <ActionButton
                      iconName="undo"
                      isDisabled={true}
                      onClick={[Function]}
                    >
                      <button
                        className="btn btn--circle action-drawer__btn fas fa-lg fa-undo btn--disabled"
                        onClick={[Function]}
                      />
                    </ActionButton>
                    <ActionButton
                      iconName="cloud-upload-alt"
                      onClick={[Function]}
                    >
                      <button
                        className="btn btn--circle action-drawer__btn fas fa-lg fa-cloud-upload-alt"
                        onClick={[Function]}
                      />
                    </ActionButton>
                    <ActionButton
                      iconName="cloud-download-alt"
                      onClick={[Function]}
                    >
                      <button
                        className="btn btn--circle action-drawer__btn fas fa-lg fa-cloud-download-alt"
                        onClick={[Function]}
                      />
                    </ActionButton>
                  </div>
                </ActionDrawer>
              </Connect(ActionDrawer)>
            </div>
          </HotKeys>
        </OrgFile>
      </Connect(OrgFile)>
    </Provider>
  </Router>
</MemoryRouter>
`;
